<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Crestron.DeviceDrivers.SDK</name>
    </assembly>
    <members>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.CommandController.CommandControllerInfo.ReleaseCommand">
            <summary>
            Command to send for Release() control commands handled by this controller.
            <para>
            A command that is not state-related such as "Select" has control commands
            "Select.SendCommand()", "Select.PressAndHold()", and "Select.Release()".
            These control commands correspond to the StateCommand enum, e.g. Release()
            for StateCommand.Release.
            This string allows the developer to specify a command, e.g. "ReleaseKey",
            to send for Release() control commands handled by this controller. However,
            this command can be overridden by properly named commands in the Commands
            list, e.g. "ReleaseSelect" for "Select", to allow individual command
            customization.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.CommandController.CommandControllerInfo.RepeatPressAndHoldCommand">
            <summary>
            Repeat the PressAndHold command for a PressAndHold() control command
            <para>
            The intent is that a PressAndHold command like "PressAndHoldSelect"
            only needs to be sent once for a PressAndHold() control command such
            as Select.PressAndHold(). However, there may be cases where the
            expects the command to be repeated. This is especially true for CEC
            where the spec does not mandate a standardized behavior, so the
            implementation can vary per device.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateController.DebounceState.Idle">
            <summary>
            Steady-state, no debouncing actions pending
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateController.DebounceState.OnTriggered">
            <summary>
            Waiting for <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateControllerInfo.MinimumTriggerOnDuration"/> to expire while state remains true
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateController.DebounceState.On">
            <summary>
            State is true, waiting for <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateControllerInfo.MinimumOnDuration"/> to expire before allowing changes
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateController.DebounceState.OffTriggered">
            <summary>
            Waiting for <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateControllerInfo.MinimumTriggerOffDuration"/> to expire while state remains true
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateController.DebounceState.Off">
            <summary>
            State is false, waiting for <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateControllerInfo.MinimumOffDuration"/> to expire before allowing changes
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateController.SetNewState(System.Nullable{System.Boolean})">
            <summary>
            Set the state and fire change events if needed
            </summary>
            <param name="value">The new value</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateController.StartDebounceTimer(System.Boolean)">
            <summary>
            Start the appropriate timer and debounce state for a given state change
            </summary>
            <param name="newState">The new state</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateControllerInfo.MinimumOffDuration">
            <summary>
                After switching to the false state, prevent switching to true for this duration
            </summary>
            <para><see cref="P:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateControllerInfo.MinimumTriggerOnDuration" /> will not start timing until *after* this delay.</para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateControllerInfo.MinimumOnDuration">
            <summary>
                After switching to the true state, prevent switching to false for this duration.
            </summary>
            <para><see cref="P:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateControllerInfo.MinimumTriggerOffDuration" /> will not start timing until *after* this delay.</para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateControllerInfo.MinimumTriggerOffDuration">
            <summary>
                Minimum time state must be false to switch from the true state
            </summary>
            <para>Pulses smaller than this duration are filtered out</para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.DebounceController.DebounceStateControllerInfo.MinimumTriggerOnDuration">
            <summary>
                Minimum time state must be true to switch from the false state
            </summary>
            <para>Pulses smaller than this duration are filtered out</para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.EventController.EventStateControllerInfo.HideEventValue">
            <summary>
            Sets the value of the event to null when sending out state changes
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.MultiValueController.MultiValueStateControllerInfo.States">
            <summary>
            States to track feedback for
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerInfo.MinRangeStep">
            <summary>
            Volume up/down will step at least this amount of the range
            Default = 0.01 (1%)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerInfo.RampWhileNotSending">
            <summary>
            Allow ramping even while commands are not being sent.
            </summary>
            <para>If not set, ramping will not start until the first command is actually sent</para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerInfo.RoundTo">
            <summary>
            Specifies how many digits the output should be rounded to.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerInfo.OnOffState">
            <summary>
            Defines the name of the "on/off" state of this controller (optional)
            <para>
            When non-null, this controller will advertise an additional boolean state
            (as-is, prefixing with this controller's name) that adds an additional value
            to the range one step below the minimum value.
            For example, if the range is 1 - 100 and this is specified, when "off" this
            controller will report 0 as TargetState but DeviceTargetState will retain its
            current value.
            </para>
            <para>
            In other words, the on/off state will override the reported value when off.
            Additionally, entering/leaving the additional virtual step below the min value
            will result in on/off commands being sent.
            In the above example, setting the value to 0 would send the off command,
            and changing from zero to nonzero would send the on command.
            However, changes to the level feedback on their own will not update the on/off state.
            It is expected that the on/off state takes precedence and will have its own feedback
            in that case.
            </para>
            <para>
            Do NOT use this to try to add an emulated boolean state which tracks whether or not
            this is at its minimum value.
            That will not work and is outside the scope of this already complex controller.
            </para>
            <para>
            To use this feature, a <see cref="F:Crestron.DeviceDrivers.SDK.StateCommand.Set"/> command should exist.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerInfo.OnOffCommandSet">
            <summary>
            Custom overrides for the default command names for the OnOff side of the controller.
            <para>
            Normally a controller named "Power" would have "GetPower", "SetPower",
            "TogglePower", etc.
            This allows the developer to specify "Get": "GetAllInfo" or "Set": "SetAllInfo"
            to avoid having to duplicate commands just to rename them to map them to controllers.
            </para>
            </summary>
            <remarks>N/A when <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerInfo.OnOffState"/> is null</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerInfo.SetCommandStrategy">
            <summary>
            Determines the strategy for choosing an order in which to send commands to
            change the value and the <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerInfo.OnOffState"/>
            </summary>
            <remarks>N/A when <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerInfo.OnOffState"/> is null</remarks>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerSetCommandStrategy">
            <summary>
            Defines a strategy for determining <see cref="F:Crestron.DeviceDrivers.SDK.StateCommand.Set" /> command sending order for
            the <see cref="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericStateController" />.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerSetCommandStrategy.ValueFirst">
            <summary>
            If a new value needs to be sent, the set command for the value will be sent first,
            ahead of the set command for the on/off state.
            <para>
            Typically, the set command for the value would also have <see cref="P:Crestron.DeviceDrivers.SDK.CommandDefinition.StatesSet" />
            include the <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerInfo.OnOffState" /> such that when the value
            needs to be sent, that command sets both.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerSetCommandStrategy.OnOffFirst">
            <summary>
            If a new value needs to be sent, the set command for the on/off state will be sent first,
            ahead of the set command for the value.
            <para>
            Typically, the set command for the value would also have <see cref="P:Crestron.DeviceDrivers.SDK.CommandDefinition.StatesSet" />
            include the value's state name such that when the on/off state needs to be sent,
            that command sets both.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerSetCommandStrategy.ValueWhileOn">
            <summary>
            The set command for the new value will be sent while the on/off state is on already.
            <para>
            In other words, command priority is "on", "set value", and then "off".
            </para>
            <para>
            This would typically be used when no command sets both the value and on/off, and the
            device requires changes to the value to be made only while already on.
            If there is no point in sending the value if turning off, use <see cref="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerSetCommandStrategy.ValueOnlyIfOn" />
            instead.
            </para>
            <para>
            As an example, if the on/off state is off and a new value of 0.5 is received, the "on"
            command will be sent and then the new value.
            If then a value of 0 is received, the set value of 0 will be sent first, followed by
            the "off" command.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerSetCommandStrategy.ValueWhileOff">
            <summary>
            The set command for the new value will be sent while the on/off state is on already.
            <para>
            In other words, command priority is "off", "set value", and then "on".
            </para>
            <para>
            This is typically used when the device allows changing the value even while off,
            and without that causing it to turn on automatically.
            That way, when it turns on (or, turns on after a future on/off change) it goes
            straight to the correct value.
            </para>
            <para>
            As an example, if the on/off state is off and a new value of 0.5 is received, the new
            value will be sent and then the "on" command.
            If then a value of 0 is received, the off command will be sent first and the new value will
            be sent after.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericControllerSetCommandStrategy.ValueOnlyIfOn">
            <summary>
            The set command for the new value will be sent only if the target and present state
            of on/off is true.
            <para>
            In other words, the on/off command is prioritized, and a set value command will only
            go out if already on.
            </para>
            <para>
            This is typically used when it is meaningless to set the value if about to be off anyway,
            since we'll get a new or invalidated value when turning back on.
            </para>
            <para>
            As an example, if the on/off state is off and a new value of 0.5 is received, the "on"
            command will be sent and then the new value.
            If then a value of 0 is received, the off command will be sent and the new value will
            not be sent to the device.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericStateController.RampingState">
            <summary>
                Tracks the state of ramping for to delay ramping while commands are not being sent.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericStateController.RampingState.Idle">
            <summary>
                Not ramping
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericStateController.RampingState.WaitForRampUp">
            <summary>
                About to start ramping up after the first command is sent
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericStateController.RampingState.WaitForRampDown">
            <summary>
                About to start ramping down after the first command is sent
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericStateController.RampingState.Active">
            <summary>
                Ramping is currently in progress
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.AcceleratingLevelRamper.#ctor(Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IAdjustableLevel,Crestron.DeviceDrivers.SDK.IActionScheduler,System.Collections.Generic.IEnumerable{System.UInt32},System.Int32,System.Int32)">
            <summary>
                As the name indicates, this ramper will accelerate the ramping speed the longer the ramping continues
                up to the maximum specified step size.  The step size is what truly dictates how fast the ramping can go.
            </summary>
            <param name="level"></param>
            <param name="scheduler"></param>
            <param name="rampSchedule"></param>
            <param name="maxStep">Maximum step size</param>
            <param name="increaseStepThreshold">Timer tick count before step size increase</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel">
            <summary>
                Integer-based level for use with <see cref="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator" />
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.LevelChangeDelegate">
            <summary>
                If the new level is not blocked, the delegate call should result in an event that ends up calling
                <see cref="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.LevelChangedHandler(System.Object,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.LevelChangedEventArgs{System.Double})" />.
            </summary>
            <param name="level">The new level in range 0 to 1.0</param>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel._scale">
            <summary>
                The scale for this level.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel._setLevel">
            <summary>
                The function to call to set a new level.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel._targetLevel">
            <summary>
                The presently set level
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.#ctor(Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.LevelChangeDelegate)">
            <summary>
                Initialize the level with the provided scale and level setter
            </summary>
            <param name="scale">The scale for the integer level. Step size must be a positive integral value.</param>
            <param name="levelChanger">Delegate function to call to set the level. <see cref="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.LevelChangeDelegate" /></param>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.IntegerLevelChanged">
            <summary>
                Event fired whenever this level changes values. EventArgs contains
                the new level.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.Level">
            <summary>
                The present level value in scaled integer units. Reading reports
                the most recently set level (updated with feedback UpdateLevel()).
                Writing this property will set the new level. This should only be
                set to change the level. Updates to the level based on feedback or
                control via another mechanism should not use this setter.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.LevelChangedHandler(System.Object,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.LevelChangedEventArgs{System.Double})">
            <summary>
                Informs this level of a change in value. Should be called by the
                <see cref="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.LevelChangeDelegate" /> to inform this object that its
                update was accepted. It should also be called when the underlying
                value changes for other reasons.
            </summary>
            <param name="sender"></param>
            <param name="e">The new value in a 0 to 1.0 scale</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.OnLevelChanged(System.Int64)">
            <summary>
                Called whenever the level changes. Sets the new level and fires
                events.
            </summary>
            <param name="level">The new level</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator">
            <summary>
                Extension of a <seealso cref="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator" /> that is built to expose a
                percent-range level as well as a 0-65535 ushort range. This is useful
                for certain RAD use cases like Volume, etc.
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.CreateIntegerLevel">
            <summary>
                Factory function to create IIntegerLevels
            </summary>
            <param name="scale">The scale to initialize the level with</param>
            <param name="changeLevel">The delegate for IIntegerLevel to change the physical level</param>
            <returns>The IIntegerLevel instance</returns>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator._percentLevel">
            <summary>
                The level as a percentage
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator._ushortLevel">
            <summary>
                The level in range 0-65535
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.#ctor(Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.LevelChangeDelegate,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale)">
            <summary>
                Default constructor which creates IntegerLevels for percent and ushort
            </summary>
            <param name="changeLevel">Delegate function to change the actual device level</param>
            <param name="defaultDeviceScale">The device's scale (default, can be updated)</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.#ctor(Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.LevelChangeDelegate,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.CreateIntegerLevel)">
            <summary>
                Fully-featured constructor which allows specifying a factory
                function to create custom IIntegerLevels.
            </summary>
            <param name="changeLevel">Delegate function to change the actual device level</param>
            <param name="defaultDeviceScale">The device's scale (default, can be updated)</param>
            <param name="levelFactory">Function to create IIntegerLevel instances for percent and ushort</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.Percent">
            <summary>
                The level as a percentage. Setting this level will update the
                level and may trigger a device level change if it corresponds
                to a new device step. It will update other synchronized levels
                either way. <seealso cref="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.UshortLevel" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.UshortLevel">
            <summary>
                The level in range 0-65535. Setting this level will update the
                level and may trigger a device level change if it corresponds
                to a new device step. It will update other synchronized levels
                either way. <seealso cref="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.Percent" />
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.PercentChanged">
            <summary>
                Event fired when the percentage value changes. Args include new value.
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.UshortLevelChanged">
            <summary>
                Event fired when the ushort value changes. Args include new value.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.DefaultIntegerLevelFactory(Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IntegerLevel.LevelChangeDelegate)">
            <summary>
                Default factory function to create IntegerLevel objects
            </summary>
            <param name="scale">The scale to initialize the level with</param>
            <param name="changeLevel">The delegate for IIntegerLevel to change the physical level</param>
            <returns>The IIntegerLevel instance</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.PercentChangedHandler(System.Object,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.LevelChangedEventArgs{System.Int64})">
            <summary>
                Event handler for the percentage level. This simply forwards the
                event along but as the expected uint type.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event args with new level</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.PercentUshortLevelTranslator.UshortChangedHandler(System.Object,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.LevelChangedEventArgs{System.Int64})">
            <summary>
                Event handler for the ushort level. This simply forwards the
                event along but as the expected ushort type.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event args with new level</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale">
            <summary>
                Represents a value scale that translates to and from a 0 to 1.0 range.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.NoStepSize">
            <summary>
                Step size for a "Continuous" range
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.#ctor(System.Double,System.Double,System.Double)">
            <summary>
                Initialize the scale with the given range
            </summary>
            <param name="min">Minimum value for the range</param>
            <param name="max">Maximum value for the range</param>
            <param name="step">Step size for the range. Set to NoStepSize for a double-precision range.</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.#ctor(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
                Initialize the scale with the given range
            </summary>
            <param name="min">Minimum value for the range</param>
            <param name="max">Maximum value for the range</param>
            <param name="step">Step size for the range. Set to NoStepSize for a double-precision range.</param>
            <param name="constrained">Whether or not to constrain values to be between min and max</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.#ctor(System.Double,System.Double,System.Double,System.Boolean,System.Int32)">
            <summary>
                Initialize the scale with the given range
            </summary>
            <param name="min">Minimum value for the range</param>
            <param name="max">Maximum value for the range</param>
            <param name="step">Step size for the range. Set to NoStepSize for a double-precision range.</param>
            <param name="constrained">Whether or not to constrain values to be between min and max</param>
            <param name="roundTo">How many digits to round the output to</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.IdentityScale">
            <summary>
                Scale from 0 to 1.0 with continuous step size and does not
                constrain to min/max.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.PercentScale">
            <summary>
                Scale with 0 to 100 range and a step size of 1
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.UInt16Scale">
            <summary>
                Scale with 0 to 65535 range and a step size of 1
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.Magnitude">
            <summary>
                The span of the range between max and min values
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.Min">
            <summary>
                Minimum value for the range (inclusive)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.Max">
            <summary>
                Maximum value for the range (inclusive)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.Step">
            <summary>
                Step size for the range, or NoStepSize for double-precision ranges.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.StepSizeOrOne">
            <summary>
            Returns the step size if a step size exists, or 1 instead
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.HasStepSize">
            <summary>
                True if the scale has a Step size, false if it is continuous
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.RoundTo">
            <summary>
                The number of digits to round to
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.ImmutableCopy">
            <summary>
                Returns itself since this object is immutable
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.FromUnityScale(System.Double)">
            <summary>
                Converts a floating point value between 0 and 1.0 to its
                corresponding value in this scale. Result will be constrained to
                fit in the range (inclusive). If <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.Step" /> is not null,
                the result will be a rounded to the nearest valid step.
            </summary>
            <param name="raw">The raw floating point value in range 0 to 1.0</param>
            <returns>The corresponding value in this scale</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.FromUnityScaleContinuous(System.Double)">
            <summary>
            Converts a floating point value between 0 and 1.0 to its
            corresponding value in this scale. Result will be constrained to
            fit in the range (inclusive).
            The step size will not be factored in, resulting in a continuous span of values.
            </summary>
            <param name="raw">The raw floating point value in range 0 to 1.0</param>
            <returns>The corresponding value in this scale, ignoring the step size</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.ToUnityScale(System.Double)">
            <summary>
                Converts a value in this level to the corresponding floating
                point value between 0 and 1.0 (inclusive)
            </summary>
            <param name="level">The level to convert</param>
            <returns>The value scaled to range 0 to 1.0</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.ToUnityScale(Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScaledValue)">
            <summary>
                Converts a value in this level to the corresponding floating
                point value between 0 and 1.0 (inclusive)
            </summary>
            <param name="level">The level to convert</param>
            <returns>The value scaled to range 0 to 1.0</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.Constrain(System.Double)">
            <summary>
                Constrains the input value to be between <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.Max" /> and
                <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.Min" />, inclusive.
            </summary>
            <param name="value">The value to constrain</param>
            <returns>The constrained value</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale.IsIntegerValue(System.Double)">
            <summary>
                Checks if the input number PARSED FROM TEXT is an exact integer
            </summary>
            <param name="number">The input number -- NOT from a calculation!</param>
            <returns>Whether or not the input was an integer</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScaledValue">
            <summary>
                Wrapper around a double for values in scaled units. Provided to
                help identify which values are in which units and allow comparison
                between values that are known to be sanitized such that that is
                safe.
                DO NOT MANUALLY CREATE INSTANCES OF THIS OUTSIDE OF
                <see cref="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScaledValue.Scale" />! This is not enforced via an interface to
                avoid the performance impact of boxing/unboxing.
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.LevelChangedEventArgs`1">
            <summary>
                Event argument for when a scaled level changes
            </summary>
            <typeparam name="T">The type of the level</typeparam>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.LevelChangedEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
                Initialize with the provided level
            </summary>
            <param name="level">The new level</param>
            <param name="isFeedback">Whether or not the is due to feedback or a scale change</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.LevelChangedEventArgs`1.IsFeedback">
            <summary>
                True if the event occurred due to processing of device feedback or
                a scale change
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.LevelChangedEventArgs`1.Level">
            <summary>
                The new level value
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IIntegerLevel">
            <summary>
                Represents an integer level that can be synchronized with other scaled
                levels
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IIntegerLevel.Level">
            <summary>
                The present level value in scaled integer units. Reading reports
                the most recently set level (updated with feedback UpdateLevel()).
                Writing this property will set the new level. This should only be
                set to change the level. Updates to the level based on feedback or
                control via another mechanism should not use this setter.
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IIntegerLevel.IntegerLevelChanged">
            <summary>
                Fired whenever the level changes values, providing the new level
                value in the event arguments.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IIntegerLevel.LevelChangedHandler(System.Object,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.LevelChangedEventArgs{System.Double})">
            <summary>
                Informs this object of an update to the level from outside its own
                control. This does not take any action to change the level, it is
                just a notification to keep it in sync with the newest value.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Holds the new level in a 0 to 1.0 scale</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IAdjustableLevel.AdjustSteps(System.Double)">
            <summary>
                Adjusts the present level up or down (as given by the sign of
                "direction") by the specified number of steps (as given by the
                magnitude of "direction"). If the step size is not set on the
                device scale, 1 is used.
            </summary>
            <param name="direction">How many steps to adjust by</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingExtensions.Decrement(Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IAdjustableLevel)">
            <summary>
                Adjusts the level by one step in the negative direction
            </summary>
            <param name="level">Level to adjust</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingExtensions.Increment(Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IAdjustableLevel)">
            <summary>
                Adjusts the level by one step in the positive direction
            </summary>
            <param name="level">Level to adjust</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator">
            <summary>
                Synchronizes multiple consumers of a level in device units to allow
                manipulation of the same underlying value from different scales. The
                intended use case is for when a device may have its own scale and we
                would like to control it as a percentage or perhaps in other units.
                Because of this, names and descriptions refer to a "device scale"
                but it's really just the underlying scale of the value being
                controlled.
            </summary>
            <remarks>
                This class is not thread-safe. Do not interact with it or the
                subscribers of its LevelChanged event directly without being careful
                to avoid race conditions when events are firing.
            </remarks>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.LevelChangeDelegate">
            <summary>
                Delegate function to be called to change the actual underlying
                level.
            </summary>
            <param name="level">The new level in native device units</param>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator._changeLevel">
            <summary>
                Delegate function to be called whenever we need to change the
                underlying device's level. Will not be called if a new level is
                set that is equivalent to the previous one.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator._currentDeviceLevel">
            <summary>
                The present level in device native units
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator._currentLevel">
            <summary>
                The present relative level in range 0 to 1.0
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator._deviceScale">
            <summary>
                The presently active scale on the device
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.#ctor(Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.LevelChangeDelegate,Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale)">
            <summary>
                Initialize the level translator
            </summary>
            <param name="changeLevel">Delegate that will be called to set new levels on the device</param>
            <param name="defaultDeviceScale">Initial scale for the device's range</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.PreservePercentWithScaleChange">
            <summary>
                Controls the behavior when the native device scale is changed.
                When set to true, the present relative value is preserved. If
                we were at 47% before the change, we'll set a new level to remain
                at 47%.
                When set to false, the present value in device's units is
                preserved. If we were at 40% and the device changed from a 0-100
                scale to 0-50, then we would report 80% after the change.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.ForcedValueBeforeRampingToZero">
            <summary>
            Forces calls to <see cref="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.AdjustSteps(System.Double)"/> to stop at this value before
            zero when using a negative step.
            <para>
            This can be useful when the zero point has some side effect and it is important
            to go though the point above that first.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.AdjustSteps(System.Double)">
            <summary>
                Adjusts the present level up or down (as given by the sign of
                "direction") by the specified number of steps (as given by the
                magnitude of "direction"). If the step size is not set on the
                device scale, 1 is used.
            </summary>
            <param name="direction">How many steps to adjust by</param>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.LevelChanged">
            <summary>
                Event fired whenever the relative level is changed (0 to 1.0 scale)
                Objects like <see cref="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IIntegerLevel" /> can subscribe to this to
                be kept in sync with other controls. The consuming classes of this
                translator may also use it if they care to track the present level
                in a 0 - 1.0 scale.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.ProcessDeviceFeedback(System.Double)">
            <summary>
                Processes feedback from the device. This method is intended to be
                called in instances where we have determined the presently active
                level and want to only update the listening levels if this new
                level is different than the old one. For example, if the device
                has steps 0 - 10 but the user set 0.48, the device will be at 5.
                This method will know that we intended to set 5 and will not change
                he 0.48 to 0.50. However, if the device reports it is at 6, that's no
                longer equivalent to the present value, so levels will be
                synchronized to the new relative value at 0.60
            </summary>
            <param name="deviceLevel">The new level in the device's units (should match the active scale)</param>
            <returns>True if this results in a new current device level</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.SetLevel(System.Double)">
            <summary>
                Sets the new relative level in range 0 to 1.0. This will
                synchronize the levels and, if the new level corresponds to a
                new step on the device, call the <see cref="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.LevelChangeDelegate" />
            </summary>
            <param name="level">The new relative level in range 0 to 1.0</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.SetStep(System.Double)">
            <summary>
                Sets the new relative level to the <paramref name="stepIndex"/>-th step
            </summary>
            <param name="stepIndex">The step number to set the value to</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.UpdateDeviceScale(Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.Scale)">
            <summary>
                Changes the default native scale. This will likely result in either
                changes to the <see cref="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.IIntegerLevel" /> objects or a call to the
                <see cref="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.LevelChangeDelegate" />, depending on the value of
                <see cref="P:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.PreservePercentWithScaleChange" />.
            </summary>
            <param name="newScale">The new device scale</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Controllers.NumericController.Scaling.ScalingLevelTranslator.UpdateLevel(System.Double,System.Boolean)">
            <summary>
                Updates the current level and notifies listeners
            </summary>
            <param name="level">The new level (unity scale)</param>
            <param name="isFeedback">Whether or not this is due to feedback or a scale change</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.ObjectController.ObjectControllerInfo.Key">
            <summary>
            <para>The key in a dictionary list to pull when converting to a dictionary</para>
            <para>This property is used to create and to convert values between list and dictionary
            formats, not when referencing the dictionary key in context</para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.ObjectController.ObjectControllerInfo.Value">
            <summary>
            The default key when passing a non-object value to a sub-state
            <para>The default key in a dictionary list to pull when converting to a dictionary</para>
            <para>This property is used to create and to convert values between list and dictionary
            formats, not when referencing the dictionary key in context</para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.ObjectController.ObjectControllerInfo.ExplodeValues">
            <summary>
            When referencing this controller, make feedback values for each property in addition to passing the whole dictionary
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.ObjectController.ObjectControllerInfo.FilterCondition">
            <summary>
            The condition to check against when running a set command. This can allow for only values that meet a certain criteria to be sent
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.SubDeviceController.SubDeviceStateControllerInfo.SubDeviceTypes">
            <summary>
            List of potential Names of sub-devices that this can contain
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.SubDeviceController.SubDeviceStateControllerInfo.AlwaysPresentDeviceArguments">
            <summary>
            Hardcoded devices to always report
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Controllers.ValueController.ValueStateControllerInfo.Values">
            <summary>
            Hardcoded values to report
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Json.Responses.JsonResponseProcessor.ReadJsonFromStream(Crestron.DeviceDrivers.SDK.Util.IBufferedStreamReader,System.Text.Encoding,System.Byte[]@)">
            <summary>
            Returns false if the stream is incomplete
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Responses.BinaryPacket.BinaryPacketComponent.Name">
            <summary>
                Name to save the parameter as, or null if not to be saved
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Responses.BinaryPacket.BinaryPacketComponent.Matches(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Checks if an array starts with the expected contents
            </summary>
            <param name="content">The content to check, which should have the expected number of bytes populated</param>
            <param name="offset">The offset into "content" to start looking at bytes</param>
            <param name="count">The number of valid bytes in content starting at offset</param>
            <returns>Whether or not the content matches</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Responses.BinaryPacket.BinaryPacketComponent.TryGetLength(Crestron.DeviceDrivers.SDK.ValueLookup,System.Int32@)">
            <summary>
                Get the expected length for this component of the response
            </summary>
            <param name="lookup">Lookup of values parsed so far</param>
            <param name="length">The parsed length</param>
            <returns>Whether or not a valid, positive length was found</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Responses.Delimiter.DelimiterResponseProcessor.RewindableTextReader">
            <summary>
            Used in this class to look ahead to process multi-character delimiters
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Responses.Delimiter.DelimiterResponseProcessor.RewindableTextReader.SeekRelativeInBuffer(System.Int32)">
            <summary>
            Looks behind (or ahead) within the buffer
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Responses.Delimiter.DelimiterResponseProcessor.RewindableTextReader.CalculateIndex(System.Int32)">
            <summary>
            Calculate an index in the buffer, handling circular wrap-around
            </summary>
            <param name="unboundedIndex">Index to calculate</param>
            <returns>Correct index</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Responses.Delimiter.DelimiterResponseProcessor.MatchDelimiter(Crestron.DeviceDrivers.SDK.Responses.Delimiter.DelimiterResponseProcessor.RewindableTextReader,System.String)">
            <summary>
            Finds a delimiter in the stream
            </summary>
            <param name="reader">Reader to search in</param>
            <param name="delimiter">String to search for</param>
            <returns>true if the delimiter was found</returns>
            <remarks>Reader's current char will be the last char of the delimiter if found</remarks>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Responses.ForEachResponseMatchBehavior.MatchIfAny">
            <summary>
            Always process each item, and consider the match successful if
            any processed correctly
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Responses.ForEachResponseMatchBehavior.MatchIfAll">
            <summary>
            Process only until the first mismatch, and require all successful matches
            to consider this a match
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Responses.ForEachResponseMatchBehavior.StopOnFirstMatch">
            <summary>
            Stop on the first match, and report mismatch if no match was found
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Responses.Join.JoinResponseProcessingNode.JoinSpecCollection.Spec">
            <summary>
            The spec for this slot as a whole (if applicable)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Responses.Join.JoinResponseProcessorInfo.Joins">
            <summary>
            Mapping of join "spec" keys to variables to template strings specifying feedback variables.
            Keys are colon-delimited and consist of a join type (a, d, or s), a number or inclusive range, and optional
            third "offset" value when computing the relative join number, and option fourth step size.
            Something like "a:12", "d:1-12", "d:20-24:12", "d:20-24:12:2", or "s:34".
            Slots are specified ahead of the string, so slot 2 analog 12 would be "2/a:12".
            Analog 12 on slot 3 on slot 2 would be "2/3/a:12"
            To make a non-contiguous range, use multiple entries and use the offset as needed.
            To select a slot itself (for further downstream processing) include only the slot path portion
            without a trailing slash.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Responses.Join.JoinResponseProcessorInfo.JoinProcessors">
            <summary>
            Mapping of join "spec" keys to variables to response processor names which handle
            the join in question.
            <para>
            If overlap with <see cref="P:Crestron.DeviceDrivers.SDK.Responses.Join.JoinResponseProcessorInfo.Joins"/> occurs, <see cref="P:Crestron.DeviceDrivers.SDK.Responses.Join.JoinResponseProcessorInfo.Joins"/> are processed first
            and then the processor here runs (and must match for the overall result to match).
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Responses.Join.JoinResponseProcessorInfo.JoinNumberPlaceholder">
            <summary>
            Variable name to put the relative join number in when evaluating the values of the <see cref="P:Crestron.DeviceDrivers.SDK.Responses.Join.JoinResponseProcessorInfo.Joins"/>
            dictionary.
            <para>
            If not specified, "N" is used.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Responses.Join.JoinResponseProcessorInfo.DigitalJoinValueMap">
            <summary>
            Mapping of digital joins to corresponding values to interpret them as
            <para>
            This could also be accomplished via a map transformation with Join.Type as the
            input, but doing it this way saves a transformation and keeps processing more contained
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Rules.Block.BlockRuleInfo.OnSetCommandTypes">
            <summary>
            If <see cref="P:Crestron.DeviceDrivers.SDK.Rules.Block.BlockRuleInfo.OnSet"/> is true, apply the rule only to these specific <see cref="T:Crestron.DeviceDrivers.SDK.StateCommand"/> types.
            </summary>
            <remarks>If not set but <see cref="P:Crestron.DeviceDrivers.SDK.Rules.Block.BlockRuleInfo.OnSet"/> is true, it applies to all <see cref="T:Crestron.DeviceDrivers.SDK.StateCommand"/> types.</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transformations.CresNext.FormatCresNextWriteTransformationInfo.AllowDeletion">
            <summary>
            Set to true to allow deletion of a parameter
            <para>
            By default, this transformation will prevent deletions of objects (sending empty dictionaries)
            to avoid any mishaps.
            It must be specifically enabled when desired.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transformations.Polynomial.PolynomialTransformationInfo.Polynomial">
            <summary>
            Polynomial coefficients to use, with highest-order coefficients first
            <para>
            If null, the input to the transformation must be a list with coefficients first and then the value
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Transformations.RijndaelEncryptor.RijndaelEncryptorTransformation.Apply(System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue})">
            <summary>
            This will seperate out any key and/or IV specified by inputValue if <see cref="P:Crestron.DeviceDrivers.SDK.Transformations.RijndaelEncryptor.RijndaelEncryptorTransformationInfo.KeyLength"/>
            and/or <see cref="P:Crestron.DeviceDrivers.SDK.Transformations.RijndaelEncryptor.RijndaelEncryptorTransformationInfo.IVLength"/> are specified in that order. If one or neither are specified,
            then the key and/or the IV will be specified by <see cref="P:Crestron.DeviceDrivers.SDK.Transformations.RijndaelEncryptor.RijndaelEncryptorTransformationInfo.Key"/>
            and/or <see cref="P:Crestron.DeviceDrivers.SDK.Transformations.RijndaelEncryptor.RijndaelEncryptorTransformationInfo.IV"/>.
            The rest of the input value is considered the string that will be encrypted.
            </summary>
            <param name="inputValue"></param>
            <returns></returns>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transformations.StringPadding.PaddingMode.SpecifiedCharacter">
            <summary>
            Padding will use the specified character (<see cref="P:Crestron.DeviceDrivers.SDK.Transformations.StringPadding.StringPaddingTransformationInfo.PaddingCharacter"/>) until the total length 
            (<see cref="P:Crestron.DeviceDrivers.SDK.Transformations.StringPadding.StringPaddingTransformationInfo.TotalLength"/>) is reached. No padding will be made if the total length is already equal
            to or less than the input value. <see cref="P:Crestron.DeviceDrivers.SDK.Transformations.StringPadding.StringPaddingTransformationInfo.PaddingCharacter"/> will be set to 0x00 by default.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transformations.StringPadding.PaddingMode.PKCS7">
            <summary>
            Pads the string with N bytes, each with a value of N where N is equal to the amount of bytes required to reach the padding length.
            If the block is already the total length (<see cref="P:Crestron.DeviceDrivers.SDK.Transformations.StringPadding.StringPaddingTransformationInfo.TotalLength"/>), then a new block is added 
            with N set to the total length.
            <para><see cref="P:Crestron.DeviceDrivers.SDK.Transformations.StringPadding.StringPaddingTransformationInfo.PaddingCharacter"/> is ignored when using this setting.</para>
            <para><see cref="P:Crestron.DeviceDrivers.SDK.Transformations.StringPadding.StringPaddingTransformationInfo.PaddingDirection"/> is ignored when using this setting.</para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Cip.CipTransportInfo.Port">
            <summary>
            Sets the reported port number for configuration purposes
            <para>
            The value this actually uses comes in as a configuration value.
            </para>
            </summary>
            <remarks>
            Do NOT reference this inside of the transport itself.
            Only use this when populating the configuration item.
            </remarks>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod">
            <summary>
                The method of authentication to an HTTPS server
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod.None">
            <summary>
                No authentication method defined = default (BASIC)
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod.Basic">
            <summary>
                HTTP Basic authentication. This is the default choice, and the only method
                that is in wide-spread use and supported virtually everywhere. This sends
                the user name and password over the network in plain text, easily captured
                by others.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod.Digest">
            <summary>
                HTTP Negotiate (SPNEGO) authentication. Negotiate authentication is defined
                in RFC 4559 and is the most secure way to perform authentication over HTTP.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod.Negotiate">
            <summary>
                HTTP Negotiate (SPNEGO) authentication. Negotiate authentication is defined
                in RFC 4559 and is the most secure way to perform authentication over HTTP.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod.NTLM">
            <summary>
                HTTP NTLM authentication. A proprietary protocol invented and used by Microsoft.
                It uses a challenge-response and hash concept similar to Digest, to prevent
                the password from being eavesdropped.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod.Digest_IE">
            <summary>
                HTTP Digest authentication with an IE flavor. Digest authentication is defined
                in RFC 2617 and is a more secure way to do authentication over public networks
                than the regular old-fashioned Basic method.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod.NTLM_WB">
            <summary>
                NTLM delegating to winbind helper. Authentication is performed by a separate
                binary application that is executed when needed. The name of the application
                is specified at compile time but is typically /usr/bin/ntlm_auth
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod.Only">
            <summary>
                This is a meta symbol. OR this value together with a single specific auth
                value to force the client to probe for un-restricted auth and if not, only
                that single auth algorithm is acceptable.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod.Anysafe">
            <summary>
                This is a convenience macro that sets all bits except Basic and thus makes
                the client pick any it finds suitable. The client will automatically select
                the one it finds most secure.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.AuthenticationMethod.Any">
            <summary>
                This is a convenience macro that sets all bits and thus makes the client
                pick any it finds suitable. The client will automatically select the one
                it finds most secure.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Transports.Http.HttpClientKeepAliveWrapper.Dispose">
            <summary>
            Make sure wrapper doesn't maintain reference to client so it can be GCed
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.Password">
            <summary>
                Password that will be inserted into the Authorization HTTPS header in the
                request to the server.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.Timeout">
            <summary>
                Gets or sets the maximum amount of time (in seconds) that a client will wait
                for a server response within a single request. The default value is 60 seconds
                (1 minute).  The timeout handling can be activated via the TimeoutEnabled
                property.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.TimeoutEnabled">
            <summary>
                This property controls whether the request operation will do an automatic timeout checking.
                If timeout handling is turned on (i.e. this property is set to true) and a request takes longer than Timeout, it
                will be terminated.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.UserName">
            <summary>
                Name that will be inserted into the Authorization HTTPS header in the request
                to the server.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.Stream">
            <summary>
                Enable streaming interface on the http(s) client
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.Verbose">
            <summary>
                Set Logging to Verbose on/off
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.AuthenticationMethod">
            <summary>
                Sets or gets the server authentication method to be used instead of the default one
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.HostVerification">
            <summary>
                Set Host Verification on/off
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.PeerVerification">
            <summary>
                Set Peer Verification on/off
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfoDefinition.Password">
            <summary>
                <see cref="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.Password" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfoDefinition.Timeout">
            <summary>
                <see cref="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.Timeout" />
                property.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfoDefinition.TimeoutEnabled">
            <summary>
                <see cref="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.TimeoutEnabled" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfoDefinition.UserName">
            <summary>
                <see cref="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.UserName" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfoDefinition.Stream">
            <summary>
                <see cref="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.Stream" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfoDefinition.Verbose">
            <summary>
                <see cref="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.Verbose" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfoDefinition.AuthenticationMethod">
            <summary>
                <see cref="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.AuthenticationMethod" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfoDefinition.HostVerification">
            <summary>
                <see cref="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.HostVerification" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfoDefinition.PeerVerification">
            <summary>
                <see cref="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.PeerVerification" />
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Transports.Http.HttpResponseHeaderMode">
            <summary>
            Controls how headers are handled in HTTP response processing
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.HttpResponseHeaderMode.Ignore">
            <summary>
            Headers are not included in response processing
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.HttpResponseHeaderMode.Items">
            <summary>
            Each header will be inserted as a value, like Http.Header.someheader
            </summary>
            <remarks>
            NOTE: All headers names will be converted to lower-case since they are case-insensitive
            while our variables are case-sensitive.
            </remarks>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.HttpResponseHeaderMode.Dictionary">
            <summary>
            Headers will be inserted as a single dictionary containing all the header values
            </summary>
            <remarks>
            NOTE: All headers names will be converted to lower-case since they are case-insensitive
            while our variables are case-sensitive.
            </remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Transports.Http.HttpsClientKeepAliveWrapper.Dispose">
            <summary>
            Make sure wrapper doesn't maintain reference to client so it can be GCed
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.HttpSendFailureRecoveryStrategy.KeepAliveRecoveryDelay">
            <summary>
                If the connection fails for this many milliseconds, we will toggle KeepAlive if enabled
            </summary>
            <para>
                This works around an issue when KeepAlive = true and the connection is lost, the client
                would fail to reconnect. Toggling KeepAlive causes the underlying connection pool to be
                disposed and recreated, allowing the connection to be restored without creating a new client.
            </para>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.HttpSendFailureRecoveryStrategy._lastErrorStopwatch">
            <summary>
                Keeps track of the time since the last request error when KeepAlive = true in order to trigger a workaround
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Http.HttpSendFailureRecoveryStrategy._keepAliveRecovery">
            <summary>
                Tracks when it is time to trigger the recovery mechanism for the KeepAlive workaround
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpTransportInfo.RetryDelayMilliseconds">
            <summary>
                Gets or sets the amount of time (in milliseconds) after sending a request
                that fails due to a transport error (timeout, connection refused, etc.)
                that requests should be delayed (as measured from when the request was sent).
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpTransportInfo.Port">
            <summary>
            Sets the reported port number for configuration purposes
            <para>
            Not presently used by the driver itself, which encodes the port in
            <see cref="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpCommandTransportInfo.Url"/>.
            That said, the driver *should* allow the port to be configured since the
            device might be behind a port-forwarding network device and be different
            that expected.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpTransportInfo.ResponseHeaderMode">
            <summary>
            Controls how headers are reported to response processing.
            See <see cref="T:Crestron.DeviceDrivers.SDK.Transports.Http.HttpResponseHeaderMode"/> value comments for details on what the options do.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Http.HttpTransportInfo.ClientCertificate">
            <summary>
            	Following are Base64.
            	TODO: encrypt or otherwise protect these
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo">
            <summary>
            Note: The properties here are only used for Entity Model drivers.
            Legacy drivers set these in the Info in the SupportedFeatures section.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.BaudRate">
            <summary>
            The Baud Rate of the device (default 9600)
            <para>
            Values presently supported by control systems are
            300,
            600,
            1200,
            1800,
            2400,
            3600,
            4800,
            7200,
            9600,
            14400,
            19200,
            28800,
            38400,
            57600,
            and
            115200
            </para>
            </summary>
            <remarks>
            Note: The driver does not set this automatically by itself.
            This is just to tell the application how to configure the port.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.DataBits">
            <summary>
            Number of stop bits
            <para>
            Values presently supported by control systems are
            7 and 8
            </para>
            </summary>
            <remarks>
            Note: The driver does not set this automatically by itself.
            This is just to tell the application how to configure the port.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.HardwareHandshake">
            <summary>
            The Hardware Handshake
            <para>
            Values presently supported by control systems are
            "None",
            "RTS",
            "CTS",
            and
            "RTS/CTS"
            </para>
            </summary>
            <remarks>
            Note: The driver does not set this automatically by itself.
            This is just to tell the application how to configure the port.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.Parity">
            <summary>
            The Device Parity
            <para>
            Values presently supported by control systems are
            "None",
            "Even",
            "Odd",
            and
            "Mark"
            </para>
            </summary>
            <remarks>
            Note: The driver does not set this automatically by itself.
            This is just to tell the application how to configure the port.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.Protocol">
            <summary>
            COM Protocol used by device
            </summary>
            <para>
            Values presently supported by control systems are
            "RS232",
            "RS422",
            and
            "RS485",
            </para>
            <remarks>
            Note: The driver does not set this automatically by itself.
            This is just to tell the application how to configure the port.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.StopBits">
            <summary>
            Number of stop bits
            <para>
            Values presently supported by control systems are
            1 and 2
            </para>
            </summary>
            <remarks>
            Note: The driver does not set this automatically by itself.
            This is just to tell the application how to configure the port.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.SoftwareHandshake">
            <summary>
            The Software Handshake
            <para>
            Values presently supported by control systems are
            "None",
            "XON",
            "XONT",
            and
            "XONR"
            </para>
            </summary>
            <remarks>
            Note: The driver does not set this automatically by itself.
            This is just to tell the application how to configure the port.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.BaudRateAdjustable">
            <summary>
            Whether or not the device supports more than one baud rate
            and the application should let the user adjust their port
            to match
            <para>
            If false, the device doesn't support multiple values and the
            value here should be the only one used
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.DataBitsAdjustable">
            <summary>
            Whether or not the device supports more than value
            and the application should let the user adjust their port
            to match
            <para>
            If false, the device doesn't support multiple values and the
            value here should be the only one used
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.ParityAdjustable">
            <summary>
            Whether or not the device supports more than value
            and the application should let the user adjust their port
            to match
            <para>
            If false, the device doesn't support multiple values and the
            value here should be the only one used
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.StopBitsAdjustable">
            <summary>
            Whether or not the device supports more than value
            and the application should let the user adjust their port
            to match
            <para>
            If false, the device doesn't support multiple values and the
            value here should be the only one used
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.HardwareHandshakeAdjustable">
            <summary>
            Whether or not the device supports more than value
            and the application should let the user adjust their port
            to match
            <para>
            If false, the device doesn't support multiple values and the
            value here should be the only one used
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.SoftwareHandshakeAdjustable">
            <summary>
            Whether or not the device supports more than value
            and the application should let the user adjust their port
            to match
            <para>
            If false, the device doesn't support multiple values and the
            value here should be the only one used
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Transports.Serial.SerialTransportInfo.GetBaudRateEnumNumber(System.UInt32)">
            <summary>
            Converts standard baud rates to `Crestron.RAD.Common.Enums.eComBaudRates`
            numbers
            <para>
            Used only for dat file generation
            </para>
            </summary>
            <param name="baudRate">The actual baud rate number</param>
            <returns>Enum integer value corresponding to the input baud rate, or 0</returns>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Tcp.TcpTransportInfo.ReconnectInterval">
            <summary>
            Specifies how long the transport must wait in milliseconds before attempting another connection to the device after a previous one failed.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Tcp.TcpTransportInfo.Encoding">
            <summary>
            The encoding used by TCPClient when sending and receiving data.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Tcp.TcpTransportInfo.Port">
            <summary>
            Sets the reported port number for configuration purposes
            <para>
            The value this actually uses comes in as a configuration value.
            </para>
            </summary>
            <remarks>
            Do NOT reference this inside of the transport itself.
            Only use this when populating the configuration item.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.Udp.UdpTransportInfo.Port">
            <summary>
            Sets the reported port number for configuration purposes
            <para>
            The value this actually uses comes in as a configuration value.
            </para>
            </summary>
            <remarks>
            Do NOT reference this inside of the transport itself.
            Only use this when populating the configuration item.
            </remarks>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Udp.UdpTransportMode.Bidirectional">
            <summary>
            Sends commands and opens a listening port
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.Udp.UdpTransportMode.SendOnly">
            <summary>
            Sends commands without opening listening port
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.WebSocket.SimplWebSocketTransport.CloseTimeout">
            <summary>
            Timeout for close message
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.WebSocket.SimplWebSocketTransport.DefaultKeepAlive">
            <summary>
            Frequency at which pings are sent to confirm connection
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Transports.WebSocket.SimplWebSocketTransport._txQueue">
            <summary>
            Queue of outgoing packets (for internal use only)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketCommandTransportInfo.PacketType">
            <summary>
            	Which packet type the frames from the command represent (binary and text are the packet types that support content)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.Headers">
            <summary>
            	Additional headers that will be sent along with the request to the server
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.Protocol">
            <summary>
            	The protocol header included by the websocket
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.UseOrigin">
            <summary>
            	Whether to include the origin header with the host IP in the handshake
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.KeepAlive">
            <summary>
            	Whether to include the KeepAlive header in the handshake
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.VerifyServerCertificate">
            <summary>
            	Whether to verify the server's certificate in the secure handshake process
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.Url">
            <summary>
            	The locator for where the server's WebSocket can be found
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.ProxyEnabled">
            <summary>
                This property controls whether the request operation will use a proxy for connection.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.ProxyHost">
            <summary>
            	The host of the proxy that is used as an intermediary in the connection to the host. This must
            	be specified if the proxy is activated. The proxy handling can be activated via the
            	ProxyEnabled property.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.ProxyPort">
            <summary>
            	The port of the proxy that is used as an intermediary in the connection to the host. This must
            	be specified if the proxy is activated. The proxy handling can be activated via the
            	ProxyEnabled property.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.ProxyUsername">
            <summary>
                Username that will be sent to the proxy that uses credentials when establishing a
                connection. The proxy handling can be activated via the ProxyEnabled property.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.ProxyPassword">
            <summary>
                Password that will be sent to the proxy that uses credentials when establishing a
                connection. The proxy handling can be activated via the ProxyEnabled property.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.ReconnectInterval">
            <summary>
            	The interval of time between a failure to connect and another connection attempt.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.PingInterval">
            <summary>
                Gets or sets the interval (in milliseconds) that the client will query the server
                for a response. The default value is 5 seconds. The request handling can be
                activated via the PingEnabled property.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.PingEnabled">
            <summary>
                This property controls whether the transport will perform automatic polling.
                If ping handling is turned on (i.e. this property is set to true) and the server
                doesn't respond, the connection will be ended.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.RespectCommandDelayInternally">
            <summary>
            	This property dictates whether internal commands i.e. Close and Ping respect
            	the IntercommandDelay or if they can send as soon as the transport is ready
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.Port">
            <summary>
            Sets the reported port number for configuration purposes
            <para>
            Not presently used by the driver itself, which encodes the port in
            <see cref="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.Url"/>.
            That said, the driver *should* allow the port to be configured since the
            device might be behind a port-forwarding network device and be different
            that expected.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.Secure">
            <summary>
            Indicates whether or not to set the "secure" flag in the dat file for this
            transport
            <para>
            Not presently used by the driver itself.
            If <see cref="P:Crestron.DeviceDrivers.SDK.Transports.WebSocket.WebSocketTransportInfo.Url"/> starts with "wss://" then "secure" is true even if this flag
            is not set.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.CommandData._stringSource">
            <summary>
                Tracks whether or not the source of the data was a string and controls how it is ToString()'ed
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.CommandDefinition.HasNoResponse">
            <summary>
            Indicates that the driver should not expect a response for this command
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.CommandDefinition.IsContextIndependent">
            <summary>
            Indicates that the command does not depend on the context (usually, sub-device) that originates it
            <para>
            When true, all controllers that use this command for get/set automatically treat it as if
            <see cref="P:Crestron.DeviceDrivers.SDK.CommandDefinition.StatesSet"/> or <see cref="P:Crestron.DeviceDrivers.SDK.CommandDefinition.StatesPolled"/> included that controller.
            When false, that only applies if the source of the command is the same context.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.CommandResponseExpectation.Unknown">
            <summary>
            It is unknown whether the command has a response
            <para>
            Logic which waits for responses should wait just in case but should not
            infer any other information if the response does not come
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.CommandResponseExpectation.HasResponse">
            <summary>
            If successful, the command will have a response
            <para>
            Logic which waits for responses should wait for a response and consider
            it meaningful if one does not come
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.CommandResponseExpectation.HasNoResponse">
            <summary>
            The command does not have a response
            <para>
            Logic which waits for responses should be bypassed for this command
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ICommand.Transport">
            <summary>
            The name of the transport this command should be sent by.
            May be null if <see cref="P:Crestron.DeviceDrivers.SDK.ICommand.IsTransportCommand"/> is false.
            </summary>
            <remarks>Use this value only when <see cref="P:Crestron.DeviceDrivers.SDK.ICommand.IsTransportCommand"/> us true.</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ICommand.IsTransportCommand">
            <summary>
            Whether to call <see cref="M:Crestron.DeviceDrivers.SDK.ICommand.Build(Crestron.DeviceDrivers.SDK.ValueLookup,Crestron.DeviceDrivers.SDK.ICommandSource,System.Boolean)"/> and send the command using the transport or to build it
            and then call <see cref="M:Crestron.DeviceDrivers.SDK.CommandData.StandaloneSend(System.Action{System.Boolean,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue}})"/>.
            Use <see cref="M:Crestron.DeviceDrivers.SDK.CommandData.StandaloneSend(System.Action{System.Boolean,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue}})"/> only if <see cref="P:Crestron.DeviceDrivers.SDK.ICommand.IsTransportCommand"/> is false.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.Priority">
            <summary>
            Sets the command priority for this controller (lower numbers are higher priority)
            </summary>
            <remarks>
            For compatibility reasons, a special case exists for priority 0.
            A value of 0 indicates that the source should be of default priority, and among
            other sources with default priority, the order in which they are inserted is the
            priority order.
            For all other priority levels, equal priorities result in round-robin command queueing.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.AlwaysSend">
            <summary>
                Always send the state at least once when a Set ControlCommand is received
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.CommandRetryCount">
            <summary>
                How many times to retry the command if it is NAKed or times out
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.DeviceProcessingTime">
            <summary>
                Retry delay, + prevent changing target value until positive feedback
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.PollingHoldoffTime">
            <summary>
                Minimum delay between sending a command and polling
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.FeedbackHoldoffTime">
            <summary>
                How long (in ms) to prevent feedback from changing our target name after
                we send a command
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.PollingInterval">
            <summary>
                Polling interval
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.ValuesWithoutFeedback">
            <summary>
                This string will be used as a Regex so that this behavior can apply to multiple states.
                Ignore feedback received (via device feedback or SetOtherFeedback rule),
                if the target state matches this regular expression unless the feedback changes
                (doesn't match actual state).
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.CommandRepeatTimings">
            <summary>
                Customized timings for repeating commands when a button is held down
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.CommandSet">
            <summary>
            Custom overrides for the default command names for the controller.
            <para>
            Normally a controller named "Power" would have "GetPower", "SetPower",
            "TogglePower", etc.
            This allows the developer to specify "Get": "GetAllInfo" or "Set": "SetAllInfo"
            to avoid having to duplicate commands just to rename them to map them to controllers.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.PollingConfiguration.Always">
            <summary>
                Always poll at the specified interval
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.PollingConfiguration.Never">
            <summary>
                Never poll
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.PollingConfiguration.IfUnknown">
            <summary>
                Poll based on the polling interval but only if the state is unknown
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.ICommandSource">
            <summary>
            Implemented by controllers which need to send commands to the device
            <para>
            NOTE: New implementations should use <see cref="T:Crestron.DeviceDrivers.SDK.IPrioritizedCommandSource"/>
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ICommandSource.RequestNoPolling">
            <summary>
                Set to true if in the middle of a repeating operation that polling may interfere with
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ICommandSource.Context">
            <summary>
                The context associated with the command source
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ICommandSource.SetCommandNames">
            <summary>
                Gets the list of known "Set" commands for which to call <see cref="M:Crestron.DeviceDrivers.SDK.ICommandSource.OnCommandWillSend(Crestron.DeviceDrivers.SDK.CommandData)"/> when sent
            </summary>
            <remarks>
                MUST NOT be null
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ICommandSource.PollingCommandNames">
            <summary>
                Gets the list of known "Polling" commands for which to call <see cref="M:Crestron.DeviceDrivers.SDK.ICommandSource.OnPollingCommandWillSend(Crestron.DeviceDrivers.SDK.CommandData)"/> when sent
            </summary>
            <remarks>
                MUST NOT be null
            </remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.ICommandSource.GetCommand">
            <summary>
                Check if a non-polling command is needed
            </summary>
            <returns>A command to send, or null if none is needed</returns>
            <para>
                This command may or may not be sent right away.
                <see cref="M:Crestron.DeviceDrivers.SDK.ICommandSource.OnCommandWillSend(Crestron.DeviceDrivers.SDK.CommandData)" /> will be called if this command is sent.
            </para>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.ICommandSource.GetPollingCommand">
            <summary>
                Check if a polling command is needed
            </summary>
            <returns>A command to send, or null if none is needed</returns>
            <para>
                This command may or may not be sent right away.
                <see cref="M:Crestron.DeviceDrivers.SDK.ICommandSource.OnPollingCommandWillSend(Crestron.DeviceDrivers.SDK.CommandData)" /> will be called if this command is sent.
            </para>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.ICommandSource.OnCommandResponse(Crestron.DeviceDrivers.SDK.ICommandResponse)">
            <summary>
                Called when a response is received to a command
            </summary>
            <param name="response">The response that was received</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.ICommandSource.OnCommandWillSend(Crestron.DeviceDrivers.SDK.CommandData)">
            <summary>
                Will be called when the code which called <see cref="M:Crestron.DeviceDrivers.SDK.ICommandSource.GetCommand" /> did, in fact, send it
            </summary>
            <param name="command">The command that was sent</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.ICommandSource.OnPollingCommandWillSend(Crestron.DeviceDrivers.SDK.CommandData)">
            <summary>
                Will be called when the code which called <see cref="M:Crestron.DeviceDrivers.SDK.ICommandSource.GetPollingCommand" /> did, in fact, send it
            </summary>
            <param name="command">The command that was sent</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.IControlCommandHandler.CommandsHandled">
            <summary>
                Names of <see cref="T:Crestron.DeviceDrivers.SDK.ControlCommand" /> handled by this handler
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.IControlCommandHandler.ProcessCommand(Crestron.DeviceDrivers.SDK.ControlCommand)">
            <summary>
                Process input control command from the frontend or rules
            </summary>
            <param name="command">The command to execute</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.IDeviceState.DeviceTargetState">
            <summary>
                Target state that the controller wants the device to be in, in device units
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.IDeviceState.PresentState">
            <summary>
                Best approximation of the present state of the device
            </summary>
            <para>
                May be based on feedback or simply whatever we last sent, depending on configuration.
            </para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.IDeviceState.TargetState">
            <summary>
                Target state that the controller wants the device to be in, translated to framework units
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.IPrioritizedCommandSource.Priority">
            <summary>
            Sets the priority of commands from this source, where lower numbers represent a higher priority.
            Negative numbers are possible to use but are discouraged since they can be confusing.
            <para>
            The default priority (used when priority is 0 or omitted) is 100
            Controllers using equal priority get round-robin service to prevent starving each other.
            </para>
            <para>
            Drivers which do not specify priorities retain the previous behavior where the order declared is
            maintained and controls the priority of related commands (and no round-robin equal priorities exist)
            </para>
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.IStateController">
            <summary>
            Interface to be implemented by a "controller" which implements one of the following interfaces:
            <see cref="T:Crestron.DeviceDrivers.SDK.IStateContributor"/>
            <see cref="T:Crestron.DeviceDrivers.SDK.ICommandSource"/>
            <see cref="T:Crestron.DeviceDrivers.SDK.IControlCommandHandler"/>
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.IStateControllerInfoWithStates">
            <summary>
            Interface to be implemented by an <see cref="P:Crestron.DeviceDrivers.SDK.ControllerDefinition.Info"/> object
            which should be modified when <see cref="M:Crestron.DeviceDrivers.SDK.ControllerDefinition.CreatePrefixed(System.String)"/> is called.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.PollingDeviceStateBase.PollingRequested">
            <summary>
            Set to true when polling is requested immediately
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.PollingDeviceStateBase.ResetPollingTime(System.Boolean)">
            <summary>
            Reset the polling timer if it exists
            </summary>
            <param name="pollImmediately">If true, will immediately trigger polling</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.ConfirmationPending">
            <summary>
                Tracks whether ack/feedback are pending
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.ActualState">
            <summary>
                Actual device state based on feedback, in device units
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.ExpectedState">
            <summary>
                State last sent to the device in a command, in device units
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.FeedbackPending">
            <summary>
                Whether or not the controller is expecting feedback to confirm the result of its previous command
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.SyncStates">
            <summary>
                Whether or not the controller should simply keep target and present states in sync
            </summary>
            <para>
                When we don't have full control over the state, we keep our states in sync.
                That way rules and other logic operate more consistently.
            </para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.TargetStateIsUnknown">
            <summary>
                Whether or not the Target State is "unknown" or "invalid"
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.TargetStatePending">
            <summary>
                Whether or not a discrete set command is pending
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.AckResponsePending">
            <summary>
                Whether or not an Ack is pending after sending the command
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.CommandAttemptCount">
            <summary>
                Remaining command attempts before giving up and reverting to the actual state
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.CommandSet">
            <summary>
                Set of commands available to the controller
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.Config">
            <summary>
                Settings from the driver configuration
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.FeedbackHoldOff">
            <summary>
                Timer tracking how long to disallow feedback from changing our target state
            </summary>
            <para>
                Scheduled Timeout is used not because we need to wake the thread when this occurs
                but rather because we want this to be in a consistent state for a given processing loop.
                Using the scheduled timeout effectively means this is sampled only once.
            </para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.ForceSend">
            <summary>
                Set to true to trigger forcing the send of the Set command even if the controller thinks the Target state is
                already there.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.LastCommand">
            <summary>
                Last command that we sent, used to match with incoming Ack feedback
            </summary>
            <para>
                Without tracking the command, an Ack of a previous command might falsely confirm the last one we sent.
            </para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.LogLevelForUnparsedFeedback">
            <summary>
                The log level to use when we get a feedback value we don't understand.
            </summary>
            <para>
                The default is <see cref="F:Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel.Error" />.
            </para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.PendingCommand">
            <summary>
                Pending non-discrete-set command to send
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.States">
            <summary>
                States provided by this controller
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.PollingHoldOff">
            <summary>
                Delay before we are allowed to send a polling command
            </summary>
            <remarks>May be null. Check before use.</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.PollingInterval">
            <summary>
                Interval that we need to send a polling command
            </summary>
            <remarks>May be null. Check before use.</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.PollingRequested">
            <summary>
                Set to true when polling is requested immediately, like when we just sent a command and are configured to require
                feedback
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.RepeatingCommandAction">
            <summary>
                Action that repeats commands if necessary.
            </summary>
            <remarks>May be null if not actively repeating.</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.RetryCommand">
            <summary>
                Which command should be resent if a retry is needed
            </summary>
            <para>
                This may be the Set command, or it may be something like CycleUp
            </para>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.RetryDelay">
            <summary>
                Timeout tracking when it is time to retry the command
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.Scheduler">
            <summary>
                Scheduler instance for scheduling future actions
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.StateController.StartRetryTimerAfterPolling">
            <summary>
                Used to delay starting the retry timer until a polling command is sent
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.ClearCommandStates">
            <summary>
                Reset the state machine for sending commands and retrying to its idle state
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.LogUnsupportedCommand(Crestron.DeviceDrivers.SDK.StateCommand)">
            <summary>
                Log an error that the given command is not supported
            </summary>
            <param name="command">The command that was received</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.OnAckAsFeedback">
            <summary>
                Called whenever we get an Ack response that we should treat as feedback
            </summary>
            <returns>Whether or not a state changed</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.OnFeedbackSetTarget">
            <summary>
                Called when we receive feedback that should update our target state
            </summary>
            <returns>Whether or not a state changed</returns>
            <remarks><see cref="P:Crestron.DeviceDrivers.SDK.StateController.ActualState" /> should already be updated with the new state before this is called</remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.ProcessFeedbackValues(Crestron.DeviceDrivers.SDK.ValueLookup)">
            <summary>
                Process incoming feedback
            </summary>
            <param name="feedback">The available feedback values</param>
            <returns>Whether or not a state changed</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.ProcessSetCommand(System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue})">
            <summary>
                Handle an incoming Set command
            </summary>
            <param name="commandValue">The new value</param>
            <para>
                This can happen even in cases where we don't have a Set command since the controller can
                be used as a "variable" in some cases.
            </para>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.SetValue(System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue})">
            <summary>
                Apply a new value from an incoming control command or similar source
            </summary>
            <param name="value">The new value</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.SubId(System.String)">
            <summary>
               Generates a name for a sub-state like Volume.Min
            </summary>
            <param name="id">The sub-state ID</param>
            <returns>The full name</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.ProcessSingleCommand(Crestron.DeviceDrivers.SDK.StateCommand)">
            <summary>
                Process a one-shot command request like CycleUp
            </summary>
            <param name="command">The command type to send</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.ResetPollingTime(System.Boolean)">
            <summary>
                Reset the polling timer if it exists
            </summary>
            <param name="pollImmediately">If true, will immediately trigger polling</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.UpdateActualState(System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue})">
            <summary>
                Set the device actual state to some value based on device feedback
            </summary>
            <param name="state">The new value</param>
            <remarks>Exists as a customization point for derived classes to hook into</remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.SetNewCommand(Crestron.DeviceDrivers.SDK.ICommand,Crestron.DeviceDrivers.SDK.StateCommand,System.Boolean)">
            <summary>
                Set up a new pending command, cancelling the previous action, if any
            </summary>
            <param name="command">The new command to queue up</param>
            <param name="stateCommand">The state command type of the command</param>
            <param name="isChangeCommand">Whether the new command will change the state</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.SetStatesFromActual">
            <summary>
                Sync states to the actual state
            </summary>
            <returns>true if a state changed</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.StartRepeatingCommand(Crestron.DeviceDrivers.SDK.StateCommand)">
            <summary>
                Start cycle of repeating a "press and hold" style command
            </summary>
            <param name="repeatCommand">The command type to repeat</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StateController.StopRepeatingCommand">
            <summary>
                Stop a repeating command, if any
            </summary>
            <remarks>
                SIDE EFFECT: Clears command states, so call this *before* setting up a new command
            </remarks>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.StateWithDeviceUnits.ValueInDeviceUnits">
            <summary>
                Target state in device units that should be used when sending commands
            </summary>
            <para>
                This is separated out from the reported state for multiple reasons.
                First, there's the case where we internally track a different scale like 0 - 1.0 and the device uses 0 - 50.
                Second, the device resolution may be lower and if we are told to set to 0.51 and the device can only do 0.50 or
                0.55.
                In that case, we need to report that we sent 0.51, or if we are changed to 0.52, report that.
                However, we wouldn't need to send a command for the update to 0.52.
            </para>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.IResponseData.CreateMutableDictionaryWithValues">
            <summary>
            Returns a mutable snapshot of this data in Dictionary form
            </summary>
            <returns>A new dictionary populated with data from this response</returns>
            <remarks>Callers may choose to modify this dictionary, so this must return a mutable copy</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.IResponseReader.ResponseStreamIsComplete">
            <summary>
            Indicates that the stream we are reading from is "complete"
            and more data is not coming.
            <para>
            This is true when the transport itself indicates the end of packets
            (like HTTP responses) or when a previous response processor component
            switches processing to be performed inside a previously captured
            outer part of a response.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.CommandResponseTransportProcessor._sentRequests">
            <summary>
            List of requests that have been sent recently.
            </summary>
            <remarks>Entries MAY BE NULL since once processed they are replaced with null.</remarks>
            <para>
            The max size of the list is controlled by <see cref="P:Crestron.DeviceDrivers.SDK.CommandResponseTransportProcessor.MaxCommandHistory"/>.
            Instead of removing entries from the list when processed, they are replaced with null.
            This ensures that old entries time out of the list even if future responses are all being received.
            Allowing old entries to hang around means that if the command id wraps around, the wrong command will be matched.
            </para>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.StandaloneCommandCoordinator.#ctor(Crestron.DeviceDrivers.SDK.TransportCoordinatorArgs)">
            <param name="args">Initialization args. Transport and ResponseNode may be null.</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.TransportDefinition.ExcludedConfigurationItems">
            <summary>
            Optional list of configuration item IDs to exclude.
            <para>
            This is used to prevent the transport from generating configuration items.
            For example, a secondary websocket transport may wish to use the same host
            name as a primary HTTP transport, not have a separate configuration item for
            the host for the websocket transport.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ControlCommand.OtherValue">
            <summary>
            Object-based value that's used to pass things like delegates to the backend.
            Prefer <see cref="P:Crestron.DeviceDrivers.SDK.ControlCommand.Value"/> if at all possible, but sometimes it is not.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.DriverCoordinator.AddInterruptActionFromDriverThread(System.Action{Crestron.DeviceDrivers.SDK.ValueLookup})">
            <summary>
            Adds an action that interrupts the processing loop at the next chance and
            runs at the start of the next loop
            </summary>
            <remarks>MUST be called from the driver thread. Is otherwise not thread-safe.</remarks>
            <param name="action">The action to perform</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.DriverCoordinator.TryBuildAndSendCommand(Crestron.DeviceDrivers.SDK.CommandRequest)">
            <summary>
            Try to send the request, checking if the transport for the request is ready
            </summary>
            <param name="request">The command request to attempt to send</param>
            <returns>Whether or not the request was sent to the transport</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.ILegacyCustomCommandSupport">
            <summary>
            Support for ICustomCommand RxOut interface
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.ILegacyBackendSupport">
            <summary>
            Collector interface for various things we implement only for legacy reasons
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityAttributeData">
            <summary>
            Union of all entity-related attribute data to help facilitate easier loading
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityAvailableValueAttribute">
            <summary>
            Used on enum members to add labels to available values
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityAvailableValueAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="label">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityAvailableValueAttribute.Label" />
            </param>
            <param name="labelLocalizationKey">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityAvailableValueAttribute.LabelLocalizationKey" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityAvailableValueAttribute.Label">
            <inheritdoc cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityLocalizedString.Text" />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityAvailableValueAttribute.LabelLocalizationKey">
            <inheritdoc cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityLocalizedString.LocalizationKey" />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityCommandAttribute">
            <summary>
            Decorates a method to mark it as an Entity Model command
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityCommandAttribute.#ctor(System.String)">
            <summary>
            Initialize with a specific ID (to override the automatic one based on the method name)
            </summary>
            <param name="id">The Entity Model name (key) for the command</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityCommandMetadataAttribute">
            <summary>
            Attribute to decorate a method which already has the <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityCommandAttribute" /> to add additional metadata.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityCommandMetadataAttribute.AdministrationCommand">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandMetadata.AdministrationCommand" />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityCommandMetadataAttribute.Programmable">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandMetadata.Programmable" />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityDataTypeAttribute">
            <summary>
            Attribute to decorate a .NET class and mark it for inclusion as an Entity Model type
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityDataTypeAttribute.#ctor(System.String)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="id">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityDataTypeAttribute.Id" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityDataTypeAttribute.Id">
            <summary>
            The Entity Model type name (key)
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityEventAttribute">
            <summary>
            Attribute to decorate a .NET event and mark it for inclusion as an Entity Model event
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityEventAttribute.#ctor(System.String)">
            <summary>
            Initialize with a specific ID (to override the automatic one based on the event name)
            </summary>
            <param name="id">The Entity Model name (key) for the event</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityEventAttribute.FriendlyName">
            <summary>
            Friendly Name of the event
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityEventAttribute.Id">
            <summary>
            The Entity Model name (key) of this event
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityEventAttribute.NameLocalizationKey">
            <summary>
            The key to use when looking up the translation key for this event
            (if one is available)
            </summary>
            <remarks>May be null</remarks>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityEventMetadataAttribute">
            <summary>
            Attribute to decorate an event which already has <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityEventAttribute" /> to add additional metadata.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityEventMetadataAttribute.Programmable">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEventMetadata.Programmable" />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityEventMetadataAttribute.TriggeredByCommands">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEventMetadata.TriggeredByCommands" />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityParameterAttribute">
            <summary>
            Attribute to decorate parameters of methods which have <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityCommandAttribute" /> to optionally provide
            additional details about the parameter
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityParameterAttribute.#ctor(System.String)">
            <summary>
            Initialize with a specific ID (to override the automatic one based on the parameter name)
            </summary>
            <param name="id">The Entity Model name (key) for the parameter</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityParameterAttribute.DefaultValue">
            <summary>
            Default value for this parameter when none is specified
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityParameterAttribute.HasDefaultValue">
            <summary>
            True if the parameter has a default value
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityParameterAttribute.OptionalFeature">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityParameterDefinition.OptionalFeature" />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityParameterAttribute.OptionalParameter">
            <summary>
            Whether the parameter is optional
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityParameterAttribute.OptionalParameterExplicitlySpecified">
            <summary>
            True if the parameter has been explicitly specified (important with auto-detection code when setting OptionalParameter
            = false)
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityPropertyAttribute">
            <summary>
            Attribute to mark a .NET property or field for inclusion as an Entity Model property
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityPropertyAttribute.#ctor(System.String)">
            <summary>
            Initialize with a specific ID (to override the automatic one based on the property name)
            </summary>
            <param name="id">The Entity Model name (key) for the property</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityPropertyMetadataAttribute">
            <summary>
            Attribute used to add additional metadata to a property which already has <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityPropertyAttribute" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityPropertyMetadataAttribute.ExtensionUiProperty">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityPropertyMetadata.ExtensionUiProperty" />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityPropertyMetadataAttribute.Programmable">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityPropertyMetadata.Programmable" />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute">
            <summary>
            Base class for other Entity Model attributes
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.AvailableValues">
            <summary>
            The collection of available values that the property may be set to.
            Note that the existence of this property does not necessarily mean
            the property is directly settable - it could still be read-only.
            The keys of this collection are the actual values that apply.
            </summary>
            <remarks>
            May be null. This dictionary is immutable and will throw an <see cref="T:System.InvalidOperationException" /> if you
            try to modify it
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.AvailableValuesLabels">
            <summary>
            Array of labels for the <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.AvailableValues"/>
            <para>
            If populated, this must be the same length as <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.AvailableValues"/>.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.AvailableValuesLocalizationKeys">
            <summary>
            Array of label localization for the <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.AvailableValues"/>
            <para>
            If populated, this must be the same length as <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.AvailableValues"/>.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.AvailableValuesProperty">
            <summary>
            The name of a neighboring or top-level property that defines the
            device-specific available values for this property.
            <para>
            That property's <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.Type" />  must be a <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueType.Array" />
            and <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.ItemType" /> must be <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueType.AvailableValue" />.
            and the value may change at runtime.
            If a neighboring property with this name exists, it is used.
            If it does not exist, it must be a top-level property.
            </para>
            </summary>
            <remarks>May be null</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.ItemType">
            <summary>
            For <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueType.Array" />s, specifies the type of the collection members.
            </summary>
            <remarks>
            Arrays of arrays are not directly supported. Instead, they must be modeled as an array of
            objects which have a property which is an array.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.Id">
            <summary>
            Friendly Name of property or parameter
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.FriendlyName">
            <summary>
            Friendly Name of property or parameter
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.NameLocalizationKey">
            <summary>
            The key to use when looking up the translation key for this property
            (if one is available)
            </summary>
            <remarks>May be null</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.ItemTypeRef">
            <summary>
            For <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueType.Object" />, <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueType.EntityDictionary"/>,
            or <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueType.DeviceDictionary"/>, or
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueType.Array" />s of those, this specifies the name of the type in use.
            This name can be used as a key in <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityDefinition.Types" /> to retrieve the
            definitions of the sub-properties.
            In some cases, this may be null if the type of object is something like a dictionary.
            </summary>
            <remarks>May be null</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.RangeMaximum">
            <summary>
            The maximum value (inclusive), or null if no maximum applies
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.RangeMinimum">
            <summary>
            The minimum value (inclusive), or null if no minimum applies
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.RangeStepSize">
            <summary>
            The smallest step size that applies to the value, like 1 for integers, or 0.5 or 0.01 for some other values.
            Will be null if no step size applies.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.RangeProperty">
            <summary>
            The name of a neighboring or top-level property that defines the
            device-specific range for this property.
            <para>
            That property's <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.Type" /> must be a <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueType.NumericRange" />
            and the value may change at runtime.
            If a neighboring property with this name exists, it is used.
            If it does not exist, it must be a top-level property.
            </para>
            </summary>
            <remarks>May be null</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.RelativeRangeProperty">
            <summary>
            The name of a neighboring or top-level property that defines the
            device-specific relative range parameters for this property.
            <para>
            That property's <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.Type" /> must be a <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueType.RelativeRange" />
            and the value may change at runtime.
            If a neighboring property with this name exists, it is used.
            If it does not exist, it must be a top-level property.
            </para>
            </summary>
            <remarks>May be null</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.Type">
            <summary>
            Specifies the type for the value of this property
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.TypeRef">
            <summary>
            Specifies the type for the value of this property by reference to a named type
            </summary>
            <remarks>Mutually exclusive with other type-related properties</remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.Units">
            <summary>
            The units of the property. May be null.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.UnitsProperty">
            <summary>
            The name of a neighboring or top-level property that defines the
            device-specific units for this property.
            <para>
            That property's <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityValueAttribute.Type" /> must be a <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueType.String" />
            and the value may change at runtime.
            If a neighboring property with this name exists, it is used.
            If it does not exist, it must be a top-level property.
            </para>
            </summary>
            <remarks>May be null</remarks>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity"/> utilizing collections of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance"/>,
            <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance"/>, <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance"/>, and <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance"/>.
            These can be populated manually, via <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RegisterObjectWithAttributes(System.Object)"/>, or both.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.#ctor(System.String)">
            <summary>
            Initialize with the given controller id (usually <see cref="F:Crestron.DeviceDrivers.EntityModel.DriverController.RootControllerId"/>,
            unless this is a child device or component of the driver).
            </summary>
            <param name="controllerId">The identifier for this entity</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.ControllerId">
            <inheritdoc/>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.PropertyChangeTracker">
            <summary>
            Utility object for this and derived classes to group property value changes
            together into a single update event
            <para>
            Used to update values that should change together (like a value and its units)
            or to optimize against many individual change events even if the values are not
            necessarily related to each other.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionLock">
            <summary>
            Lock used to synchronize access to the collections of commands, properties, events, and types.
            It is used internally by this class but may also be used by derived classes if needed for similar
            purposes (to avoid the memory allocation of creating more Simpl# critical sections).
            </summary>
            <remarks>
            Do NOT attempt to use other locks while holding this one.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChangedEvent">
            <summary>
            Implementation of <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged"/>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.EventRaisedEvent">
            <summary>
            Implementation of <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.EventRaised"/>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.ValuesChangedEvent">
            <summary>
            Implementation of <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.ValuesChanged"/>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.SubControllersChangedEvent">
            <summary>
            Implementation of <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.SubControllersChanged"/>
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged">
            <inheritdoc/>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.EventRaised">
            <inheritdoc/>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.ValuesChanged">
            <inheritdoc/>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.SubControllersChanged">
            <inheritdoc/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.ExecuteCommand(System.String,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})">
            <inheritdoc/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.GetState">
            <inheritdoc/>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.SubControllers">
            <inheritdoc/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.UpdateSubControllers(System.Collections.Generic.IEnumerable{Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the list of controllers for child entities beneath this one
            <para>
            This method will raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.SubControllersChanged"/> event if any
            changes occur.
            </para>
            </summary>
            <param name="added">New controllers to add</param>
            <param name="removed">IDs of existing controllers that are removed</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RegisterObjectWithAttributes(System.Object)">
            <summary>
            Searches the provided object for members decorated with
            <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityCommandAttribute"/>, <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityPropertyAttribute"/>,
            or <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityEventAttribute"/> and adds those commands, properties,
            and events to this entity.
            </summary>
            <param name="instance">The object with the attributes on its members</param>
            <exception cref="T:System.ArgumentException">Thrown when duplicate commands, properties, or events are added</exception>
            <seealso cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.UnregisterObjectWithAttributes(System.Object)"/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.UnregisterObjectWithAttributes(System.Object)">
            <summary>
            Unregisters an object previously registered with <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RegisterObjectWithAttributes(System.Object)"/>
            <para>
            This is typically used when dynamically adding/removing sets of features based on the remote
            device's capabilities and/or settings
            </para>
            </summary>
            <param name="instance">The instance previously registered</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.AddCommand(System.Object,System.String,Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance)">
            <summary>
            Adds a new command to the entity
            <para>
            This does NOT raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged"/> event.
            Once all items are added, the <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseDefinitionChangedEvent"/> method
            should be called to notify the application of the changes.
            </para>
            </summary>
            <param name="instance">The first argument to pass to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Execute(System.Object,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup,System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})"/> for <paramref name="command"/> (for reusing <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance"/> objects)</param>
            <param name="name">The name (key) of the command</param>
            <param name="command">The implementation for this command</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RemoveCommand(System.String)">
            <summary>
            Removes an existing command from the entity
            <para>
            This does NOT raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged"/> event.
            Once all items are removed, the <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseDefinitionChangedEvent"/> method
            should be called to notify the application of the changes.
            </para>
            </summary>
            <param name="name">The name (key) of the command</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.AddEvent(System.Object,System.String,Crestron.DeviceDrivers.SDK.EntityModel.EventInstance)">
            <summary>
            Adds a new event to the entity
            <para>
            This does NOT raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged"/> event.
            Once all items are added, the <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseDefinitionChangedEvent"/> method
            should be called to notify the application of the changes.
            </para>
            </summary>
            <param name="instance">The first argument to pass to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.Subscribe(System.Object,System.Action{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEvent},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)"/> for <paramref name="eventInstance"/> (for reusing <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance"/> objects)</param>
            <param name="name">The name (key) of the event</param>
            <param name="eventInstance">The implementation for this event</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RemoveEvent(System.String)">
            <summary>
            Removes an existing event from the entity
            <para>
            This does NOT raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged"/> event.
            Once all items are removed, the <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseDefinitionChangedEvent"/> method
            should be called to notify the application of the changes.
            </para>
            </summary>
            <param name="name">The name (key) of the event</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.AddProperty(System.Object,System.String,Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance)">
            <summary>
            Adds a new property to the entity
            <para>
            This does NOT raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged"/> event.
            Once all items are added, the <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseDefinitionChangedEvent"/> method
            should be called to notify the application of the changes.
            </para>
            </summary>
            <param name="instance">The first argument to pass to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance.GetValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)"/> for <paramref name="property"/> (for reusing <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance"/> objects)</param>
            <param name="name">The name (key) of the property</param>
            <param name="property">The implementation for this property</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RemoveProperty(System.String)">
            <summary>
            Removes an existing property from the entity
            <para>
            This does NOT raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged"/> event.
            Once all items are removed, the <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseDefinitionChangedEvent"/> method
            should be called to notify the application of the changes.
            </para>
            </summary>
            <param name="name">The name (key) of the property</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.AddTypeReference(System.String,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance)">
            <summary>
            Adds a reference to a type, effectively adding that type to the entity.
            However, additional additions of the same type are allowed and will increment
            a counter.
            Removing references will decrement the counter, and the type definition will only
            be removed from the entity when the last reference is removed.
            <para>
            This does NOT raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged"/> event.
            Once all items are added, the <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseDefinitionChangedEvent"/> method
            should be called to notify the application of the changes.
            </para>
            </summary>
            <param name="name">The name (key) of the type</param>
            <param name="type">The type implementation</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RemoveTypeReference(System.String)">
            <summary>
            Removes a reference to a type, decrementing the number of references to that type.
            The type definition will only be removed from the entity when the last reference is removed.
            <para>
            This does NOT raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged"/> event.
            Once all items are removed, the <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseDefinitionChangedEvent"/> method
            should be called to notify the application of the changes.
            </para>
            </summary>
            <param name="name">The name (key) of the type</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.NotifyPropertyChanged(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue)">
            <summary>
            Notify the application of a change to a property and its new value.
            This will raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.ValuesChanged"/> event.
            If during a batched update of <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.PropertyChangeTracker"/>,
            the event will only be raised when the batch is completed.
            <para>
            This does not update any <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance"/>s.
            Those must also reflect the new value in case the application calls <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.GetState"/>.
            </para>
            <para>
            See the other overloads of this method to choose the most optimal one.
            This overload provides the new value in its entirety and is suitable for
            simple values or such large changes to collections or complex types that
            it's most efficient to simply provide the entire copy of it again.
            </para>
            </summary>
            <param name="name">The name (key) of the property</param>
            <param name="value">The new property value</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.NotifyPropertyChanged(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue)">
            <summary>
            Notify the application of a change to a property and its new value.
            This will raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.ValuesChanged"/> event.
            If during a batched update of <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.PropertyChangeTracker"/>,
            the event will only be raised when the batch is completed.
            <para>
            This does not update any <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance"/>s.
            Those must also reflect the new value in case the application calls <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.GetState"/>.
            </para>
            <para>
            See the other overloads of this method to choose the most optimal one.
            This overload will compare the old and new value and build a suitable update.
            For collections and complex types, this will recursively compare the values and
            attempt to find insertions, deletions, and updates to specific items.
            </para>
            </summary>
            <param name="name">The name (key) of the property</param>
            <param name="prevValue">The previous value of the property</param>
            <param name="value">The new property value</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.NotifyPropertyChanged(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate)">
            <summary>
            Notify the application of a change to a property and its new value.
            This will raise the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.ValuesChanged"/> event.
            If during a batched update of <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.PropertyChangeTracker"/>,
            the event will only be raised when the batch is completed.
            <para>
            This does not update any <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance"/>s.
            Those must also reflect the new value in case the application calls <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.GetState"/>.
            </para>
            <para>
            See the other overloads of this method to choose the most optimal one.
            This overload lets the programmer craft the update object manually to
            specifically reflect the changes.
            It is often more optimal than the other methods but requires more care
            and must be crafted correctly in order to function properly.
            Programmers are encouraged to compare their updates with the ones produced
            by <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.EntityModelUtils.CreateUpdate(System.Int32,System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue)"/> to verify their implementation.
            </para>
            </summary>
            <param name="name">The name (key) of the property</param>
            <param name="update">The update object</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseValueChangeEvent(System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate})">
            <summary>
            Directly raises the value change event
            </summary>
            <param name="values">The data associated with the event</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseEntityEvent(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEvent)">
            <summary>
            Raises the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.EventRaised"/> event with the associated data
            </summary>
            <param name="eventData">The data associated with the event</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RaiseDefinitionChangedEvent">
            <summary>
            Raises the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.DefinitionChanged"/> event
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.GetCommand(System.String)">
            <summary>
            Retrieves a command and its associated instance based on its name, with null members of
            <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.BoundItem`1"/> if it does not exist
            </summary>
            <param name="commandName">The name (key) of the command</param>
            <returns>The command instance, or a <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.BoundItem`1"/> with null members if it does not exist</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.TypeLookup(System.String)">
            <summary>
            Retrieves a previously registered type instance based on its name, or null if it does not exist
            </summary>
            <param name="typeName">The name (key) of the type</param>
            <returns>The registered <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance"/>, or null if the type is not registered</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.CreateValueForObject(System.String,System.Object)">
            <summary>
            Helper method to create a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue"/> from an object
            and its registered type name
            </summary>
            <param name="typeName">The entity type name (key) that was registered for this object</param>
            <param name="o">The object instance</param>
            <returns>The converted value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the type is not registered</exception>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.CreateValueForObject(System.Object)">
            <summary>
            Helper method to create a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue"/> from an object
            whose runtime type was registered via <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.AddTypeReference(System.String,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance)"/>
            </summary>
            <param name="o">The object instance</param>
            <returns>The converted value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the type is not registered</exception>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.CreateValueForObjects``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Helper method to create a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue"/> for a collection
            of objects that can be passed to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.CreateValueForObject(System.Object)"/>
            </summary>
            <typeparam name="T">The type of the objects</typeparam>
            <param name="values">The values to create an array out of</param>
            <returns>The converted value</returns>
            <exception cref="T:System.ArgumentException">Thrown when an object type is not registered</exception>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.CreateValuesForObjects``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Helper method to generate a number of <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue"/>s for objects
            which can be passed to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.CreateValueForObject(System.Object)"/>
            </summary>
            <typeparam name="T">The type of the objects</typeparam>
            <param name="values">The values to convert</param>
            <returns>The converted values</returns>
            <exception cref="T:System.ArgumentException">Thrown when an object type is not registered</exception>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.CreateValueForEntries``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}})">
            <summary>
            Helper method to create a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue"/> for a dictionary
            of objects that can be passed to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.CreateValueForObject(System.Object)"/>
            </summary>
            <typeparam name="T">The type of the objects</typeparam>
            <param name="values">The values to create a dictionary out of</param>
            <returns>The converted value</returns>
            <exception cref="T:System.ArgumentException">Thrown when an object type is not registered</exception>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.CreateValuesForEntries``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}})">
            <summary>
            Helper method to generate a number of key-value pairs of <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue"/>s for objects
            which can be passed to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.CreateValueForObject(System.Object)"/>
            </summary>
            <typeparam name="T">The type of the objects</typeparam>
            <param name="values">The values to convert</param>
            <returns>The converted key-value pairs</returns>
            <exception cref="T:System.ArgumentException">Thrown when an object type is not registered</exception>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker">
            <summary>
            Tracks sets of property changes and raises performs change notifications all at once
            <para>
            This class also contains a locking mechanism to synchronize property changes when necessary.
            The parameter to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.StartBatchedUpdate(System.Boolean)" /> controls whether this locking is used.
            Callback actions are provided for the end of the update on both sides of the lock
            (before it is released and after).
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate},System.Object},System.Action{System.Object})">
            <summary>
            Initialize with required properties
            </summary>
            <param name="withLockNotifyAction">
            Action to invoke at the end of a batched property change before releasing the lock
            (when using an exclusive update - otherwise, it is called without the lock).
            The dictionary parameter is the collection of updates to be applied.
            The return value is an object that is then passed to <paramref name="notifyAction" /> (after releasing the lock, if
            applicable).
            </param>
            <param name="notifyAction">
            Action to invoke at the end of a batched property change (after releasing the lock when using exclusive updates).
            The parameter is the return value from <paramref name="withLockNotifyAction" />.
            </param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)">
            <summary>
            Marks the completion of a set of batched updates (must be paired with a prior call to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.StartBatchedUpdate(System.Boolean)" />
            )
            <para>
            Note that nested calls to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.StartBatchedUpdate(System.Boolean)" /> are supported.
            The batch is not complete until the matching number of <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" /> calls are made.
            </para>
            <para>
            In most cases, the return value of <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.StartBatchedUpdate(System.Boolean)" /> will be in a "using" statement which
            when disposed will call <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" />.
            Callers should only manually call <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" /> if the "using" statement pattern is
            not possible.
            </para>
            </summary>
            <param name="fromExclusive">Must match the parameter passed to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.StartBatchedUpdate(System.Boolean)" /></param>
            <exception cref="T:System.InvalidOperationException">Thrown whenever this is called while not in a batched update</exception>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.NotifyPropertyChanged(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue)">
            <summary>
            Registers a property change to the batch
            <para>
            If not inside a pair of <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.StartBatchedUpdate(System.Boolean)" /> and <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" />,
            the property change actions will be invoked immediately.
            </para>
            </summary>
            <param name="propertyName">The name (key) of the property that changed</param>
            <param name="value">The new property value</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.NotifyPropertyChanged(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate)">
            <summary>
            Registers a property change to the batch
            <para>
            If not inside a pair of <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.StartBatchedUpdate(System.Boolean)" /> and <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" />,
            the property change actions will be invoked immediately.
            </para>
            </summary>
            <param name="propertyName">The name (key) of the property that changed</param>
            <param name="update">The update to register into the batch</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.StartBatchedUpdate(System.Boolean)">
            <summary>
            Begins a batch update, delaying property change events until <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" />
            is invoked OR the returned <see cref="T:System.IDisposable" /> is disposed (which itself invokes
            <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" />)
            <para>
            Where possible, it is best to call this in a "using" statement to ensure the matching
            <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" />
            call occurs (which is handled automatically by the object being disposed).
            </para>
            <para>
            Nested calls to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.StartBatchedUpdate(System.Boolean)" /> are supported and must be paired with a
            matching number of calls to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" />.
            </para>
            </summary>
            <param name="exclusive">
            If true, will hold a lock that synchronizes other calls to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.StartBatchedUpdate(System.Boolean)" />.
            If <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" /> is called manually (instead of using the <see cref="T:System.IDisposable" />),
            the caller must ensure that it passes the same boolean value as <paramref name="exclusive" /> is here.
            </param>
            <returns>
            An object that when disposed calls <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BatchPropertyChangeTracker.FinishBatchedUpdate(System.Boolean)" />.
            This is intended to facilitate "using" statements with the return value of this method.
            </returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.BoundItem`1">
            <summary>
            Helper struct to pair an item with another object
            </summary>
            <typeparam name="T">The type of the item</typeparam>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.BoundItem`1.#ctor(System.Object,`0)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="instance">
            <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.BoundItem`1.Instance" />
            </param>
            <param name="item">
            <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.BoundItem`1.Item" />
            </param>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.BoundItem`1.Instance">
            <summary>
            The instance associated with the item
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.BoundItem`1.Item">
            <summary>
            The stored item
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.CachedPropertyInstance">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance" /> with a settable <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CachedPropertyInstance.Value" />
            that is cached until manually updated.
            <para>
            Note that setting <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CachedPropertyInstance.Value" /> does not automatically raise a property change event
            as there is no such event on this class.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CachedPropertyInstance.#ctor(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityPropertyDefinition,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityPropertyMetadata)">
            <inheritdoc />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CachedPropertyInstance.Value">
            <summary>
            The value to return in <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.CachedPropertyInstance.GetValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)" />.
            <para>
            If the nullable value is null (rather than HasValue being true with a contained <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> that
            is null), then the default value for the entity model type will be used.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CachedPropertyInstance.GetValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance">
            <summary>
            Abstract class used by <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity" /> to support entity model commands
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.#ctor(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandMetadata,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initialize with required properties
            </summary>
            <param name="id">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Id" />
            </param>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Definition" />
            </param>
            <param name="metadata">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Metadata" />
            </param>
            <param name="parameterOrder">Populates <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.ParameterOrder" /> and must support multiple enumeration</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Definition">
            <summary>
            Describes the command, its parameters, and the return type (if any)
            <para>
            This is returned as part of <see cref="M:Crestron.DeviceDrivers.EntityModel.DriverController.GetState(System.String)" />.,
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Id">
            <summary>
            The name (key) of the entity model command
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Metadata">
            <summary>
            Additional metadata for the command definition
            <para>
            This is returned as part of <see cref="M:Crestron.DeviceDrivers.EntityModel.DriverController.GetState(System.String)" />.,
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.ParameterOrder">
            <summary>
            Used when we have arguments in array form, like when wrapping
            ExtensionDevice DoCommand calls
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Execute(System.Object,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup,System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})">
            <summary>
            Called to execute the command
            </summary>
            <param name="instance">
            User-defined object given to <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity" /> when adding the command (so the
            <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance" /> can be reused for multiple objects that implement the same command)
            </param>
            <param name="args">The command arguments</param>
            <param name="typeLookup">A lookup function of type converters to help convert arguments and return values</param>
            <param name="resultCallback">
            The (possibly null) callback to invoke when the command completes (must be invoked if not
            null)
            </param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity">
            <summary>
            Class which pairs a driver entity with its (optional) configuration
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity.#ctor(System.String,Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity,Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="controllerId">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity.ControllerId" />
            </param>
            <param name="entity">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity.Entity" />
            </param>
            <param name="configuration"><see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity.Configuration" /> (can be null)</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity.Configuration">
            <summary>
            Used to configure the entity.
            If no configuration is required, this will return a singleton configuration controller with
            no items.
            It will not return null.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity.ControllerId">
            <summary>
            The ID of the entity
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity.Entity">
            <summary>
            Representation of the entity within the driver (accessible after it is configured)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity.HasConfiguration">
            <summary>
            True if the entity requires configuration before use.
            This does NOT reflect the current configuration status.
            In other words, if the entity required configuration and has been configured already,
            this will still return true.
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurationItemErrors">
            <summary>
            Describes error status in response to an applied set of configuration items
            <para>
            Consumers of this class must anticipate that any property and combinations of
            properties in this class might be null or non-null.
            All combinations are valid and additively specify the errors.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurationItemErrors.ConfigurationErrorsByItemId">
            <summary>
            A collection of error messages, keyed by <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.Id" />s
            <para>
            The values of this dictionary must not be null.
            An item with no errors should not be present in the dictionary.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.ConfigurationItemErrors.ErrorMessage">
            <summary>
            A top-level error message describing an error that either spans multiple configuration
            items or is not related to one in particular.
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorConfigurationController">
            <summary>
            Configuration implementation for drivers utilizing the data-driven <see cref="T:Crestron.DeviceDrivers.SDK.DriverCoordinator" /> state machine
            or compatible <see cref="T:Crestron.DeviceDrivers.SDK.ICapabilityBackend" />.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorConfigurationController.#ctor(Crestron.DeviceDrivers.SDK.ICapabilityBackend,Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="backend">The backend implementation to send configuration value writes to and pull values changes from</param>
            <param name="args">The creation args from the application instantiating the driver</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorConfigurationController.FromResources(Crestron.DeviceDrivers.SDK.DriverImplementationResources,Crestron.DeviceDrivers.EntityModel.DriverControllerCreationArgs,System.String)">
            <summary>
            Creates and initializes this class using <see cref="T:Crestron.DeviceDrivers.SDK.DriverImplementationResources" />
            </summary>
            <param name="data">Collection of data used to initialize this and similar classes</param>
            <param name="args">The creation args from the application instantiating the driver</param>
            <param name="controllerId">The ID of the entity this configuration controller is for</param>
            <returns></returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorConfigurationController.SetTransportImplementation(Crestron.DeviceDrivers.EntityModel.TransportTx,System.Action{System.String,System.Action{System.String}},System.Action{System.String,System.Action{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorConfigurationController.UnsetTransportImplementation">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorConfigurationController.ApplyConfigurationItemValues(Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction,System.String,System.Collections.Generic.IDictionary{System.String,System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue}})">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity" /> utilizing <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity" /> and the
            data-driven <see cref="T:Crestron.DeviceDrivers.SDK.DriverCoordinator" /> state machine
            </summary>
            <remarks>
            Note that this class provides public access its internal <see cref="T:Crestron.DeviceDrivers.SDK.DriverCoordinator"/> for driver
            implementations to extend its functionality.
            Consumers of this entity should NEVER access those.
            Applications should NEVER reference this class, either.
            </remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity.#ctor(Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs)">
            <summary>
            Initialize using the provided dependencies
            </summary>
            <param name="args">Instance holding the many arguments and dependencies to this class</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity.FromResources(Crestron.DeviceDrivers.SDK.DriverImplementationResources,System.String,System.String)">
            <summary>
            Creates and initializes an instance using <see cref="T:Crestron.DeviceDrivers.SDK.DriverImplementationResources" />
            </summary>
            <param name="data">The <see cref="T:Crestron.DeviceDrivers.SDK.DriverImplementationResources" /> with class dependencies</param>
            <param name="controllerId">The ID of this entity</param>
            <param name="coordinatorPrefix">The prefix to use with the <see cref="T:Crestron.DeviceDrivers.SDK.DriverCoordinator" />, if any (can be null)</param>
            <returns></returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity.SetActiveComponents(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Sets the complete list of active components on this entity
            <para>
            This should ONLY be called if the active component list never comes from
            <see cref="T:Crestron.DeviceDrivers.SDK.DriverCoordinator" />.
            </para>
            </summary>
            <param name="activeComponents">The complete list of active components</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity.EnqueueCommand(System.String)">
            <summary>
            Enqueues a named fire-and-forget command to send to the device
            </summary>
            <param name="commandName">The name of the command to send</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity.EnqueueCommand(Crestron.DeviceDrivers.SDK.CommandData)">
            <summary>
            Enqueues a custom fire-and-forget command to send to the device
            </summary>
            <param name="commandData">The data to send to the device</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity.EnqueueSynchronousActionWithValueLookup(System.Action{Crestron.DeviceDrivers.SDK.ValueLookup})">
            <summary>
            Enqueues an action on the <see cref="T:Crestron.DeviceDrivers.SDK.DriverCoordinator"/> thread with a value lookup
            </summary>
            <param name="action">The action to perform</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs">
            <summary>
            Arguments to initialize <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity" />
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.#ctor(System.String,System.String,Crestron.DeviceDrivers.SDK.DriverControllerDefinition,Crestron.DeviceDrivers.SDK.DriverCoordinator,Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityCreationDependencies,System.Collections.Generic.ICollection{System.String},System.Func{Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity,Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity})">
            <summary>
            Initialize with required properties
            </summary>
            <param name="controllerId">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.ControllerId" />
            </param>
            <param name="coordinatorPrefix">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.CoordinatorPrefix" />
            </param>
            <param name="driverControllerDefinition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.DriverControllerDefinition" />
            </param>
            <param name="coordinator">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.Coordinator" />
            </param>
            <param name="dependencies">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.Dependencies" />
            </param>
            <param name="activeComponents">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.ActiveComponents" />
            </param>
            <param name="subControllerHook">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.SubControllerHook" />
            </param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.#ctor(System.String,System.String,Crestron.DeviceDrivers.SDK.DriverControllerDefinition,Crestron.DeviceDrivers.SDK.DriverCoordinator,Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityCreationDependencies,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initialize with required properties
            </summary>
            <param name="controllerId">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.ControllerId" />
            </param>
            <param name="coordinatorPrefix">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.CoordinatorPrefix" />
            </param>
            <param name="driverControllerDefinition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.DriverControllerDefinition" />
            </param>
            <param name="coordinator">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.Coordinator" />
            </param>
            <param name="dependencies">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.Dependencies" />
            </param>
            <param name="activeComponents">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.ActiveComponents" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.ActiveComponents">
            <summary>
            Initial immutable list of active components (can be replaced with a new list of components later via
            <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity" />, but do not modify this instance).
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.ControllerId">
            <summary>
            The ID of this entity
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.Coordinator">
            <summary>
            The <see cref="T:Crestron.DeviceDrivers.SDK.DriverCoordinator" /> implementation to use as the backend for this implementation
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.CoordinatorPrefix">
            <summary>
            The prefix to use with <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.Coordinator" />, if any
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.Dependencies">
            <summary>
            Other dependencies required by <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.DriverControllerDefinition">
            <summary>
            The <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.DriverControllerDefinition" /> data to use to populate this entity
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityArgs.FromResources(Crestron.DeviceDrivers.SDK.DriverImplementationResources,System.String,System.String,System.Func{Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity,Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity})">
            <summary>
            Creates and initializes an instance using <see cref="T:Crestron.DeviceDrivers.SDK.DriverImplementationResources" />
            </summary>
            <param name="data">The <see cref="T:Crestron.DeviceDrivers.SDK.DriverImplementationResources" /> with class dependencies</param>
            <param name="controllerId">The ID of this entity</param>
            <param name="coordinatorPrefix">The prefix to use with the <see cref="T:Crestron.DeviceDrivers.SDK.DriverCoordinator" />, if any (can be null)</param>
            <param name="subControllerHook">Hook to replace sub-controllers, or null if not needed</param>
            <returns></returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityCreationDependencies">
            <summary>
            Immutable collection of dependencies for <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity" /> to use
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityCreationDependencies.#ctor(System.Func{System.String,Crestron.DeviceDrivers.SDK.ITransformation},Crestron.DeviceDrivers.SDK.IDriverLogger,Crestron.DeviceDrivers.SDK.DriverDefinition)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="transformationLookup">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityCreationDependencies.TransformationLookup" />
            </param>
            <param name="logger">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityCreationDependencies.Logger" />
            </param>
            <param name="driverDefinition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityCreationDependencies.DriverDefinition" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityCreationDependencies.DriverDefinition">
            <summary>
            The data that configures the logic and operation of the data-driven engine
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityCreationDependencies.Logger">
            <summary>
            The <see cref="T:Crestron.DeviceDrivers.SDK.IDriverLogger" /> to use for logging and creating child <see cref="T:Crestron.DeviceDrivers.SDK.IComponentLogger" />s
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntityCreationDependencies.TransformationLookup">
            <summary>
            A function which accepts a <see cref="T:System.String" /> name of a transformation and returns the corresponding instance, or
            null if no such transformation exists
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DataDirectoryLocalization">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization" /> utilizing a "translations" directory in the driver
            containing JSON translation files.
            <para>
            At this time, this class does not fully support updates to these files during operation.
            If changed, this implementation will only pick up the new files the next time translations
            are requested and will not raise the localization change events.
            </para>
            <para>
            This class caches the translations in memory and does not re-read a file unless the timestamp of the file changes.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDirectoryLocalization.SupportedCultures">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDirectoryLocalization.GetLanguageTranslations(System.String)">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DataDirectoryLocalization.SupportedCulturesChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DataDirectoryLocalization.LanguageTranslationsChanged">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDirectoryLocalization.LoadIfExists(System.String,Crestron.DeviceDrivers.SDK.IComponentLogger)">
            <summary>
            Creates an instance of this class using the specified driver data directory if there is a "translations" directory
            within it, or a "no localization" singleton instance if that directory does not exist
            </summary>
            <param name="driverDataDirectoryPath">
            The data directory path where the driver is extracted to (typically
            <see cref="P:Crestron.DeviceDrivers.EntityModel.DriverControllerCreationArgs.DriverDataDirectoryPath" />)
            </param>
            <param name="logger">The logger to use with this implementation</param>
            <returns>A non-null implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization" /></returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController">
            <summary>
            Handles driver configuration using a data-driven state machine, where items and steps
            are defined in JSON (or equivalent data structure)
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction">
            <summary>
            Possible actions in <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationItemValues(Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction,System.String,System.Collections.Generic.IDictionary{System.String,System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue}})" />
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction.ApplyAll">
            <summary>
            Used when the <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfiguration(System.Collections.Generic.IDictionary{System.String,System.String})" /> is called with all valid items, such
            as for reloaded saved configuration values after an application restart.
            Also used when already configured and a number of items (but not necessarily all items) are updated and applied.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction.ApplyStep">
            <summary>
            Used when a single step is being applied in the configuration workflow
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction.ClearValues">
            <summary>
            Used when the application goes back in the configuration workflow to clear out any items that are no longer valid.
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ConfigurationItemsUpdated">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ConfigurationListChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.StatusChanged">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationItemValues(Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction,System.String,System.Collections.Generic.IDictionary{System.String,System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue}})">
            <summary>
            Called when configuration item values are applied
            <para>
            This can be called with an <paramref name="action" /> of <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction.ApplyAll" /> with a
            collection of all valid items, such as for reloaded saved configuration values after an application restart.
            In these cases, <paramref name="stepId" /> will be null.
            </para>
            <para>
            This can also be called with an <paramref name="action" /> of <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction.ApplyAll" /> with one
            or more updated items after the driver is already configured, but not necessarily with all items.
            In this case, the driver may still return errors for invalid settings or combinations of settings.
            <paramref name="stepId" /> will still be null.
            </para>
            <para>
            When <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationStep(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" /> is called with valid items for a given
            step, <paramref name="action" /> will be <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction.ApplyStep" /> and
            <paramref name="stepId" /> will be populated.
            </para>
            <para>
            Finally, when the application goes back one or more steps in the configuration workflow, this may be called with an
            <paramref name="action" /> of <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction.ClearValues" /> with <paramref name="values" />
            populated with items to clear (depending on which ones are no longer valid due to backtracking).
            In this case, <paramref name="stepId" /> will be null.
            </para>
            </summary>
            <param name="action">The <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction" /> that caused this call</param>
            <param name="stepId">The ID of the current configuration step, or null if not applicable</param>
            <param name="values">The values being applied (or cleared, if null)</param>
            <returns>Any errors that result from applying the values</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.SetTransportImplementation(Crestron.DeviceDrivers.EntityModel.TransportTx,System.Action{System.String,System.Action{System.String}},System.Action{System.String,System.Action{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.UnsetTransportImplementation">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfiguration(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationStep(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.GetAllConfigurationValues">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.GetFirstConfigurationStep">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.GetStatus">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.NotifyValuesChanged(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue}}})">
            <summary>
            Notify this class of changed values that may pertain to the configuration items
            </summary>
            <param name="values">
            The new values to consider propagating to the application as events (if they match known
            configuration items)
            </param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs">
            <summary>
            Dependencies needed for a <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController" />
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.#ctor(System.String,System.String,Crestron.DeviceDrivers.SDK.ConfigurationStepsDefinition,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IList{Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition}}},System.Func{System.String,Crestron.DeviceDrivers.SDK.ICondition},System.Func{System.String,Crestron.DeviceDrivers.SDK.ITransformation},Crestron.DeviceDrivers.SDK.IComponentLogger)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="deviceModel">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.DeviceModel" />
            </param>
            <param name="controllerId">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.ControllerId" />
            </param>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.Definition" />
            </param>
            <param name="transportConfigurationItems">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.TransportConfigurationItems" />
            </param>
            <param name="conditionLookup">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.ConditionLookup" />
            </param>
            <param name="transformationLookup">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.TransformationLookup" />
            </param>
            <param name="logger">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.Logger" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.ConditionLookup">
            <summary>
            Function which, given a <see cref="T:System.String" /> name of a condition, returns the corresponding <see cref="T:Crestron.DeviceDrivers.SDK.ICondition" />
            instance, or null if no such condition exists
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.ControllerId">
            <summary>
            The ID of the entity associated with this configuration controller
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.Definition">
            <summary>
            The data that drives this data-driven engine
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.DeviceModel">
            <summary>
            The <see cref="P:Crestron.DeviceDrivers.EntityModel.DriverControllerCreationArgs.DeviceModel" /> passed by the application (can be null if the application
            did not provide one)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.Logger">
            <summary>
            The logger to use for configuration-related diagnostics
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.TransformationLookup">
            <summary>
            Function which, given a <see cref="T:System.String" /> name of a transformation, returns the corresponding
            <see cref="T:Crestron.DeviceDrivers.SDK.ITransformation" /> instance, or null if no such transformation exists
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.TransportConfigurationItems">
            <summary>
            Collection (usually a dictionary) of items provided by transports, where the keys are the names of the transports
            and the values are the items defined by those transports
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationControllerArgs.FromResources(Crestron.DeviceDrivers.EntityModel.DriverControllerCreationArgs,Crestron.DeviceDrivers.SDK.DriverImplementationResources,System.String)">
            <summary>
            Initialize from <see cref="T:Crestron.DeviceDrivers.SDK.DriverImplementationResources" />
            </summary>
            <param name="args">The creation args passed by the application when creating the driver</param>
            <param name="data">The <see cref="T:Crestron.DeviceDrivers.SDK.DriverImplementationResources" /> to pull from</param>
            <param name="controllerId">The ID of the entity associated with this configuration controller</param>
            <returns></returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext">
            <summary>
            Options providing additional context for a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" />.  Usage contexts give the consuming
            application insight
            about what the configuration item's intention is.  It can provide information about whether hardware resources are
            required (ie. Com/Cec ports)
            as well as indicate how a particular <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> should be handled (ie. Internally by the
            application or externally by the installer).
            <para>
            For example, a <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.UsageContext" /> of <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Data" /> indicates to the consuming
            application that the
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> is intended to be consumed internally, and not be visible to the installer, whereas a
            <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.UsageContext" /> of
            <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Generic.Prompt" /> indicates to the consuming application that the item is intended to be shown to the
            installer for configuration.
            </para>
            <seealso cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.UsageContext" />
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Data">
            <summary>
            Used to indicate that the <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> contains general data and settings associated with the
            driver that do not require
            user input.  <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.UsageContext" />  that are set to <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Data" /> should not be displayed
            to the end user and should be passed
            back to the driver with the latest value.
            This is typically used to store driver specific settings across reboots (ex. Authorization tokens, state information
            that the driver may want to persist)
            <seealso cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.UsageContext" />
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Generic">
            <summary>
            Contains general purpose usage contexts to create custom prompts
            <seealso cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.UsageContext" />
            ///
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Generic.Prompt">
            <summary>
            Indicates that the <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> is a custom prompt that will be defined by the various properties
            of the <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" />.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Generic.Url">
            <summary>
            Indicates that the <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> is intended to contain a URL.  The URL will be assigned to the
            <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.CurrentValue" />
            and there may optionally be a <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.CurrentValueDisplayOverride" /> containing a display
            label for the URL.
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com">
            <summary>
            Contains usage contexts specific to com ports and their related settings.  A <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> is
            required for each <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com" />
            usage context.
            <para>
            To have a driver associated with a com port, the driver must define a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> for each
            <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com" /> usage context (all contexts are required).
            All of the <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> for the com port must be located in a single
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationStep" />.  This <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationStep" /> should only have
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> related to the com port (ie. a <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.UsageContext" /> with a
            value within <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com" />).  Splitting <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com" />
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> across multiple <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationStep" /> is not supported.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.ChannelId">
            <summary>
            Specifies the id that will be used to send/receive messages to/from the com port.  This id is generated by the host
            application
            and is sent to the driver during configuration.  The id is unique across all drivers and transports (ex. a
            <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.ChannelId" />
            and <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Cec.ChannelId" /> will be globally unique).  Setting the <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.ChannelId" /> to <c>null</c> should
            clear the value
            and indicates that no port is connected (messages should no longer be sent until a new <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.ChannelId" /> is
            assigned).
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.Protocol">
            <summary>
            Specifies which com protocol is supported by the driver. The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.String" />.
            Valid values are ("RS232", "RS422", and "RS485").
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.BaudRate">
            <summary>
            Specifies which baud rate(s) are supported by the driver.The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.String" />.
            The valid values include:
            300
            600
            1200
            1800
            2400
            3600
            4800
            7200
            9600
            14400
            19200
            28800
            38400
            57600
            115200
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.DataBits">
            <summary>
            Specifies the Data Bits that are supported by this driver. The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.Number" />.
            Valid values include: 7, 8
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.Parity">
            <summary>
            Specifies the parity values that are supported by this driver. The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.String" />.
            Valid values include: "None", "Even", "Odd", "Mark"
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.StopBits">
            <summary>
            Specifies the stop bit values that are supported by this driver.  The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should
            be <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.Number" />.
            Valid values include: 1, 2
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.HardwareHandshake">
            <summary>
            Specifies the hardware handshake values that are supported by this driver. The
            <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.String" />.
            Valid values include: "None", "RTS", "CTS", "RTS/CTS"
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.SoftwareHandshake">
            <summary>
            Specifies the software handshake values that are supported by this driver.  The
            <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.String" />.
            Valid values include: "None", "XON", "XONT", "XONR"
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network">
            <summary>
            Contains usage contexts specific to a network port and its related settings.  A <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> is
            required for each <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network" />
            usage context.
            <para>
            If the driver communicates with a device over the network and requires the user to specify the network address and/or
            port,
            the driver must define a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationStep" /> containing one or more <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> for
            each required <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network" /> usage context.
            All of the <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> for the network settings must be located in a single
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationStep" /> including any <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Authentication" />.
            This <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationStep" /> should only have <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> related to the network settings
            (ie. a <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.UsageContext" />
            with a value within <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network" /> and/or <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Authentication" />).  Splitting <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network" /> and
            <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Authentication" /> <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" />
            across multiple <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationStep" /> is not supported.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network.Address">
            <summary>
            Specifies the item is associated with a Network Address.  The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.String" />
            and the <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.Description" /> should specify if the value should be an IP Address, Hostname, or
            either.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network.Port">
            <summary>
            Specifies the item is associated with a Network Port.  The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.Number" />
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network.IpId">
            <summary>
            Specifies the item is associated with an IpId.  The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.Number" />
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network.CresnetId">
            <summary>
            Specifies the item is associated with a cresnet id.  The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.Number" />
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network.RfId">
            <summary>
            Specifies the item is associated with a InfinetEx rf id.  The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" /> should be
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.Number" />
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Authentication">
            <summary>
            Contains usage contexts specific to providing credentials for authentication.
            <para>
            The driver may define a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> for each supported <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Authentication" /> usage
            context.  It is not required to create a
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> for all <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Authentication" /> context.  For example, if the driver only
            requires a <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Authentication.Username" />,
            it does not need to define a separate <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> for the <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Authentication.Password" />.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Authentication.Username">
            <summary>
            Specifies the item is associated with the user name of a credential.  The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" />
            should be <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.String" />.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Authentication.Password">
            <summary>
            Specifies the item is associated with the password of a credential.  The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.ValueType" />
            should be <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.String" />.
            The <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.Masked" /> should be set to <c>true</c>.
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Cec">
            <summary>
            Contains usage contexts specific to CEC ports and their related settings.  A <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> is
            required for each <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Cec" />
            usage context.
            <para>
            To have a driver associated with a cec port, the driver must define a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> for each
            <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Cec" /> usage context.
            The <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> for the CEC port must be located in a single <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationStep" />.
            This <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationStep" /> should only have
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> related to the CEC port (ie. a <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.UsageContext" /> with a
            value within <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Cec" />).  Splitting <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Cec" />
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> across multiple <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationStep" /> is not supported.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Cec.ChannelId">
            <summary>
            Specifies the id that will be used to send/receive messages to/from the CEC port.  This id is generated by the host
            application
            and is sent to the driver during configuration.  The id is unique across all drivers and transports (ex. a
            <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com.ChannelId" />
            and <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Cec.ChannelId" /> will be globally unique).  Setting the <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Cec.ChannelId" /> to <c>null</c> should
            clear the value
            and indicates that no port is connected (messages should no longer be sent until a new <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Cec.ChannelId" /> is
            assigned).
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.ResourceObject">
            <summary>
            Contains usage contexts specific to providing resource object required for initialization of certain drivers.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.ResourceObject.ControlSystem">
            <summary>
            Specifies the control system object that the driver will be using in order to control the device. This is commonly paired 
            with a <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network.IpId"/> in order to fully create the SSP device required for control/communication.
            The expected type of this resource object is Crestron.SimplSharpPro.CrestronControlSystem.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.ResourceObject.CresnetBranch">
            <summary>
            Specifies the cresnet branch object that the driver will be using in order to control the device. This is commonly paired 
            with a <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network.CresnetId"/> in order to fully create the SSP device required for control/communication.
            It is expected that a device on internal cresnet gateway would also populate this object.
            The expected type of this resource object is Crestron.SimplSharpPro.CrestronControlSystem for internal cresnet and
            Crestron.SimplSharpPro.DeviceSupport.IDeviceBranch for ethernet to cresnet bridges.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.ResourceObject.InfinetExGateway">
            <summary>
            Specifies the InfinetEx gateway object that the driver will be using in order to control the device. This is commonly
            paired with a <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Network.RfId"/> in order to fully create the SSP device required for control/communication.
            It is expected that a device on internal Ex gateway would also populate this object.
            The expected type of this resource object is Crestron.SimplSharpPro.IExGateway for both internal and external ex gateways.
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.CoordinatorCommandInstance">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance" /> that utilizes the <see cref="T:Crestron.DeviceDrivers.SDK.DriverCoordinator" /> data-driven engine
            under the hood
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.CoordinatorCommandInstance.#ctor(System.String,Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementationComponent{Crestron.DeviceDrivers.SDK.EntityModel.Data.OrderedDriverEntityCommandDefinition,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandMetadata,System.Collections.Generic.List{Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation}},Crestron.DeviceDrivers.SDK.DriverCoordinator,System.String,Crestron.DeviceDrivers.SDK.IComponentLogger,System.Func{System.String,Crestron.DeviceDrivers.SDK.ITransformation})">
            <summary>
            Initialize with required properties
            </summary>
            <param name="id">The name (key) of the event</param>
            <param name="impl">The definition, metadata, and implementation data</param>
            <param name="coordinator">The <see cref="T:Crestron.DeviceDrivers.SDK.DriverCoordinator" /> coordinator instance to submit commands to</param>
            <param name="controlCommandPrefix">The prefix to use for commands (if any)</param>
            <param name="logger">The logger to write diagnostic information to</param>
            <param name="transformationLookup">
            Function that returns the <see cref="T:Crestron.DeviceDrivers.SDK.ITransformation" /> instance given its name as
            a parameter, or null if no such transformation exists
            </param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.CoordinatorCommandInstance.Execute(System.Object,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup,System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation">
            <summary>
            Data structure that describes an action for a <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.CoordinatorCommandInstance" />
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.#ctor(System.String,System.Boolean,Crestron.DeviceDrivers.SDK.StateCommand,Crestron.DeviceDrivers.SDK.StateCommand,System.String,System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{Crestron.DeviceDrivers.SDK.TransformCallDefinition})">
            <summary>
            Initialize with required properties
            </summary>
            <param name="name">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Name" />
            </param>
            <param name="noPrefix">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.NoPrefix" />
            </param>
            <param name="stateCommand">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommand" />
            </param>
            <param name="pulseStateCommand">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.PulseStateCommand" />
            </param>
            <param name="stateCommandArgName">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommandArgName" />
            </param>
            <param name="value">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Value" />
            </param>
            <param name="useArgsDictionary">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.UseArgsDictionary" />
            </param>
            <param name="valueArgName">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.ValueArgName" />
            </param>
            <param name="valueDictionaryArgMap">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.ValueDictionaryArgMap" />
            </param>
            <param name="transformations">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Transformations" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Name">
            <summary>
            The name for the <see cref="P:Crestron.DeviceDrivers.SDK.ControlCommand.Name" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.NoPrefix">
            <summary>
            When true, <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Name" /> will not be prefixed with the sub-device ID (n/a for the root device)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.PulseStateCommand">
            <summary>
            When <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommandArgName" /> is non-null, this can be used to replace the default behavior of parsing as a
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommand" /> with a mapping for command functions (pulse, high, low).
            Set this to the base <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommand" /> for the pulse action (i.e. <see cref="F:Crestron.DeviceDrivers.SDK.StateCommand.Increment" />).
            Then, the <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommandArgName" /> argument will be read and map "pulse" to that command, "high" to the
            "hold" version (i.e. <see cref="F:Crestron.DeviceDrivers.SDK.StateCommand.HoldIncrement" />), and "low" to <see cref="F:Crestron.DeviceDrivers.SDK.StateCommand.Release" />.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommand">
            <summary>
            The <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommand" /> for the <see cref="P:Crestron.DeviceDrivers.SDK.ControlCommand.CommandId" />
            <para>
            When <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommandArgName" /> is specified, that takes precedence.
            When both are specified, this is the fallback whenever the value passed by the application for
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommandArgName" /> is omitted or null.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommandArgName">
            <summary>
            The parameter name in the Entity Model command to parse the <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommand" /> from
            <para>
            Alternatively, this can be paired with <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.PulseStateCommand" /> to parse the argument value as "pulse", "high",
            or "low" and map that to the correct <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.StateCommand" /> variant.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Transformations">
            <summary>
            Transformations to apply before evaluating other components requiring value lookups (or null if not applicable)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.UseArgsDictionary">
            <summary>
            When true, the argument dictionary passed to the Entity Model command is passed through as the
            <see cref="P:Crestron.DeviceDrivers.SDK.ControlCommand.Value" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Value">
            <summary>
            The value for <see cref="P:Crestron.DeviceDrivers.SDK.ControlCommand.Value" />
            <para>
            If <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.ValueArgName" /> is also specified, that takes precedence and this becomes the default value when that
            argument is omitted.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.ValueArgName">
            <summary>
            The name of the Entity Model command parameter whose value should be used for <see cref="P:Crestron.DeviceDrivers.SDK.ControlCommand.Value" /> (if
            present).
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.ValueDictionaryArgMap">
            <summary>
            Populates the <see cref="P:Crestron.DeviceDrivers.SDK.ControlCommand.Value" /> with a dictionary of arguments where they keys come as-is from this
            dictionary and the values are evaluated <see cref="T:Crestron.DeviceDrivers.SDK.ITemplateString" />s (after any <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Transformations" /> are
            applied
            <para>
            This is often used to populate values with <see cref="F:Crestron.DeviceDrivers.SDK.StateCommand.SendCommand" /> and then use said values when
            building a command
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.GetName">
            <summary>
            Gets the <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Name" /> template string
            </summary>
            <returns>The <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Name" /> for the <see cref="T:Crestron.DeviceDrivers.SDK.ControlCommand" /></returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.GetTransformations">
            <summary>
            Gets the collection of <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Transformations" /> in usable instance form
            </summary>
            <returns>The applicable transformations, if any</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.Initialize(System.Func{System.String,Crestron.DeviceDrivers.SDK.ITransformation})">
            <summary>
            Secondary initialization function that connects the transformation lookup
            <para>
            This cannot come in via the constructor because this class is also used as a data structure in JSON.
            </para>
            </summary>
            <param name="transformationLookup">
            Function that returns the <see cref="T:Crestron.DeviceDrivers.SDK.ITransformation" /> with the provided name, or
            null if no such transformation exists
            </param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityCommandImplementation.NeedsLookup">
            <summary>
            True if using this class will result in needing a value lookup for template strings or other items
            </summary>
            <returns>True if a value lookup will be needed</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityEventImplementation">
            <summary>
            Data structure for <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity" /> to implement events
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityEventImplementation.#ctor(System.String)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="name">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityEventImplementation.Name" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityEventImplementation.Name">
            <summary>
            The name of the controller whose state change events should trigger the Entity Model event and whose value, if any,
            should be associated with the event
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementation">
            <summary>
            Data structure that configures the operation <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementation.Commands">
            <summary>
            Definition and implementation of entity model commands
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementation.Events">
            <summary>
            Definition and implementation of entity model events
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementation.Properties">
            <summary>
            Definition and implementation of entity model properties
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementation.Types">
            <summary>
            Definition entity model types
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementationComponent`3">
            <summary>
            Holds a combination of definition, metadata, and implementation data
            </summary>
            <typeparam name="TDefinition"></typeparam>
            <typeparam name="TMetadata"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementationComponent`3.#ctor(`0,`1,`2)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementationComponent`3.Definition" />
            </param>
            <param name="metadata">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementationComponent`3.Metadata" />
            </param>
            <param name="implementation">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementationComponent`3.Implementation" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementationComponent`3.Definition">
            <summary>
            The definition for the component
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementationComponent`3.Implementation">
            <summary>
            The implementation information for the component
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityImplementationComponent`3.Metadata">
            <summary>
            The metadata for the component
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityPropertyImplementation">
            <summary>
            Contains the implementation information for a property in <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CoordinatorDriverEntity" />
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityPropertyImplementation.#ctor(System.String)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="name">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityPropertyImplementation.Name" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.DriverEntityPropertyImplementation.Name">
            <summary>
            The name of the controller which holds the value for this property
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.OrderedDriverEntityCommandDefinition">
            <inheritdoc cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition" />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.OrderedDriverEntityCommandDefinition.#ctor(Crestron.DeviceDrivers.SDK.Util.OrderedDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityParameterDefinition},Crestron.DeviceDrivers.EntityModel.Data.DriverEntityTypeDefinition,System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityLocalizedString)">
            <inheritdoc
                cref="M:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition.#ctor(System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityParameterDefinition},Crestron.DeviceDrivers.EntityModel.Data.DriverEntityTypeDefinition,System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityLocalizedString)" />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.OrderedDriverEntityCommandDefinition.FriendlyName">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition.FriendlyName" />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.OrderedDriverEntityCommandDefinition.Parameters">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition.Parameters" />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.OrderedDriverEntityCommandDefinition.TypeDef">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition.TypeDef" />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.Data.OrderedDriverEntityCommandDefinition.TypeRef">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition.TypeRef" />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Data.OrderedDriverEntityCommandDefinition.GetDefinition">
            <summary>
            Creates a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition" /> from this object
            </summary>
            <returns>Immutable converted instance (with parameter order lost)</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DelegateCommandInstance">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance" /> which utilizes a delegate to execute the command
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DelegateCommandInstance.ExecuteMethod">
            <summary>
            Defines a method which executes the command
            </summary>
            <param name="commandId">The name (key) of the command being executed</param>
            <param name="instance">
            The instance to which the command definition is related (provided to allow reuse of this
            instance across multiple entities)
            </param>
            <param name="args">The arguments to the command</param>
            <param name="typeLookup">A delegate to look up types for convenient conversion of arguments and return values</param>
            <param name="resultCallback">
            The callback provided by the application to (potentially asynchronously) return results
            (must be called if non-null, can be null)
            </param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DelegateCommandInstance.#ctor(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandMetadata,Crestron.DeviceDrivers.SDK.EntityModel.DelegateCommandInstance.ExecuteMethod,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initialize with required properties
            </summary>
            <param name="id">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Id" />
            </param>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Definition" />
            </param>
            <param name="metadata">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.Metadata" />
            </param>
            <param name="execute">The delegate to call when <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.DelegateCommandInstance.Execute(System.Object,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup,System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})" /> is called</param>
            <param name="parameterOrder">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.ParameterOrder" />
            </param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DelegateCommandInstance.Execute(System.Object,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup,System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DelegateDataDrivenConfigurationController">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController" /> which utilizes delegates for
            the application of configuration items but leaves the presentation and validation of steps to
            the data-driven implementation.
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DelegateDataDrivenConfigurationController.ApplyConfigurationItemValuesFunc">
            <inheritdoc cref="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationItemValues(Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction,System.String,System.Collections.Generic.IDictionary{System.String,System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue}})" />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DelegateDataDrivenConfigurationController.SetTransportImplementationFunc">
            <inheritdoc cref="M:Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.SetTransportImplementation(Crestron.DeviceDrivers.EntityModel.TransportTx,System.Action{System.String,System.Action{System.String}},System.Action{System.String,System.Action{System.String}})" />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DelegateDataDrivenConfigurationController.SetTransportImplementation(Crestron.DeviceDrivers.EntityModel.TransportTx,System.Action{System.String,System.Action{System.String}},System.Action{System.String,System.Action{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DelegateDataDrivenConfigurationController.UnsetTransportImplementation">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DelegateDataDrivenConfigurationController.ApplyConfigurationItemValues(Crestron.DeviceDrivers.SDK.EntityModel.DataDrivenConfigurationController.ApplyConfigurationAction,System.String,System.Collections.Generic.IDictionary{System.String,System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue}})">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DelegatePropertyInstance">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance" /> that utilizes a delegate to retrieve the value
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DelegatePropertyInstance.#ctor(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityPropertyDefinition,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityPropertyMetadata,System.Func{System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup,System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue}})">
            <summary>
            Initialize with required properties and the delegate
            </summary>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance.Definition" />
            </param>
            <param name="metadata">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance.Metadata" />
            </param>
            <param name="getValue">Implementation of <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance.GetValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)" /></param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DelegatePropertyInstance.GetValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController" /> that handles tracking of one or more
            entities and dispatching calls to the correct entity to handle.
            <para>
            Also used as a base class in other implementations of <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController" />.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.#ctor(Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity,Crestron.DeviceDrivers.EntityModel.DriverControllerCreationArgs,Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization)">
            <summary>
            Initialize with a root controller and required arguments
            </summary>
            <param name="rootController">The root controller for this driver</param>
            <param name="args">Initialization arguments passed by the application</param>
            <param name="localization">
            Handler for driver localization. Must not be null. Use
            <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.NoLocalization.Instance" /> if localization is not supported.
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ControllerIds">
            <inheritdoc />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.SupportedCultures">
            <inheritdoc />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ComponentLogger">
            <summary>
            Logger for this and derived classes to write diagnostic information to
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ConfigurationItemsUpdatedEvent">
            <summary>
            Event handler to enable raising the corresponding <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController" /> event (including wrapper for 3-Series
            thread safety)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ConfigurationListChangedEvent">
            <summary>
            Event handler to enable raising the corresponding <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController" /> event (including wrapper for 3-Series
            thread safety)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.DefinitionChangedEvent">
            <summary>
            Event handler to enable raising the corresponding <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController" /> event (including wrapper for 3-Series
            thread safety)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.DriverControllerLogger">
            <summary>
            Reference to the logger provided by the application
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.EventRaisedEvent">
            <summary>
            Event handler to enable raising the corresponding <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController" /> event (including wrapper for 3-Series
            thread safety)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.LanguageTranslationsChangedEvent">
            <summary>
            Event handler to enable raising the corresponding <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController" /> event (including wrapper for 3-Series
            thread safety)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.Localization">
            <summary>
            Reference to the <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization" /> passed into the constructor
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.Logger">
            <summary>
            Driver SDK logger (which writes to <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.DriverControllerLogger" />)
            <para>
            This is generally only used to create <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ComponentLogger" />s or provide
            to other parts of the SDK that do so.
            For logging from this and derived classes, <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ComponentLogger" /> is usually
            more appropriate.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ResourceObjectLookup">
            <summary>
            Reference to the <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ResourceObjectLookup" /> provided by the application (null if not provided by the
            application)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.StatusChangedEvent">
            <summary>
            Event handler to enable raising the corresponding <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController" /> event (including wrapper for 3-Series
            thread safety)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.SupportedCulturesChangedEvent">
            <summary>
            Event handler to enable raising the corresponding <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController" /> event (including wrapper for 3-Series
            thread safety)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.TransportTx">
            <summary>
            Reference to the <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.TransportTx" /> delegate provided by the application (can be null if the application passed
            in null)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ValuesChangedEvent">
            <summary>
            Event handler to enable raising the corresponding <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController" /> event (including wrapper for 3-Series
            thread safety)
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ConfigurationItemsUpdated">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ConfigurationListChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ControllerIdsChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.DefinitionChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.EventRaised">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.LanguageTranslationsChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.StatusChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.SupportedCulturesChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ValuesChanged">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ApplyConfiguration(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ApplyConfigurationStep(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ExecuteCommand(System.String,System.String,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.GetAllConfigurationValues(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.GetFirstConfigurationStep(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.GetLanguageTranslations(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.GetState(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.GetStatus(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.TransportRx(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.LogCommandExecution(System.String,System.String,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue})">
            <summary>
            Helper method to log the execution of a command
            </summary>
            <param name="controllerId">The controller the command is targeting</param>
            <param name="commandName">The name (key) of the command</param>
            <param name="args">The command arguments</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.LogControllerIdChanges(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Helper method to log a change to the <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.ControllerIds" /> list
            </summary>
            <param name="added">The IDs of added controllers</param>
            <param name="removed">The IDs of removed controllers</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.LogEventRaised(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEvent)">
            <summary>
            Helper method to log that a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEvent" /> is being raised
            </summary>
            <param name="controllerId">The controller raising the event</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.LogValueChanges(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityPropertyUpdate)">
            <summary>
            Helper method to log one or more value changes
            </summary>
            <param name="controllerId">The controller with changing values</param>
            <param name="e">The value change data</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.TransportRxSubscribe(System.String,System.Action{System.String})">
            <summary>
            Subscribe to a communications channel provided in the configuration process
            </summary>
            <param name="channelId">The channel to subscribe to</param>
            <param name="onDataReceived">The action to invoke when data is received</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.TransportRxUnsubscribe(System.String,System.Action{System.String})">
            <summary>
            Unsubscribe from a communications channel provided in the configuration process
            </summary>
            <param name="channelId">The channel to unsubscribe from</param>
            <param name="onDataReceived">The action that was passed to <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.TransportRxSubscribe(System.String,System.Action{System.String})" /></param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.TryGetController(System.String,Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity@)">
            <summary>
            Gets a controller by its ID
            </summary>
            <param name="controllerId">The controller to retrieve</param>
            <param name="controller">The controller instance, or null if not found</param>
            <returns>True if the controller existed</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DispatchingDeviceController.UpdateSubDevices(System.String,System.Collections.Generic.ICollection{Crestron.DeviceDrivers.SDK.EntityModel.ConfigurableDriverEntity})">
            <summary>
            Recursively update the list of sub-devices in a particular category
            <para>
            Categories are provided to track multiple references to the same controller and detect the last reference to a
            controller is removed.
            Any children of a sub-device will use their parent's ID as a category.
            That way, a sub-device under multiple parents will only be added once, and will only be removed when the last reference
            to it is.
            </para>
            <para>
            Customizations may use other categories as long as they do not conflict with another controller's ID.
            </para>
            </summary>
            <param name="category">The category to update sub-devices for</param>
            <param name="subDevices">The full collection of sub-devices for that category/controller.</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DriverControllerChannelGenericStreamTransport">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.IGenericStreamTransport" /> using <see cref="T:Crestron.DeviceDrivers.EntityModel.TransportTx" />
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverControllerChannelGenericStreamTransport.#ctor(System.String,Crestron.DeviceDrivers.EntityModel.TransportTx)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="channelId"></param>
            <param name="transportTx"></param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.DriverControllerChannelGenericStreamTransport.ChannelId">
            <summary>
            The channel ID to use for communications
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DriverControllerChannelGenericStreamTransport.OnDataReceived">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverControllerChannelGenericStreamTransport.Send(Crestron.DeviceDrivers.SDK.CommandData)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverControllerChannelGenericStreamTransport.NotifyDataReceived(System.String)">
            <summary>
            Called when data is received to pass it along to the <see cref="T:Crestron.DeviceDrivers.SDK.IGenericStreamTransport" /> interface
            </summary>
            <param name="data">The data from the communications channel</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityTransportTxChannel">
            <summary>
            Helper class to manage Entity Model TX/RX communications in a single class
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityTransportTxChannel.Dispose">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityTransportTxChannel.DataReceived">
            <summary>
            Raised whenever data is received
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityTransportTxChannel.Send(System.String)">
            <summary>
            Sends data through the channel (if the channel is open)
            </summary>
            <param name="data">The data to send</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityTransportTxChannel.SetChannelId(System.String)">
            <summary>
            Sets the channel ID (typically called in response to driver configuration), unsubscribing to a previous channel if
            necessary.
            <para>
            To un-set the channel ID, pass in null.
            When this object is disposed, this method is called with null, so there is no need to set the channel to null before
            disposing.
            </para>
            </summary>
            <param name="channelId">The new channel ID, or null to close the channel</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityTransportTxChannel.SetTransportImplementation(Crestron.DeviceDrivers.EntityModel.TransportTx,System.Action{System.String,System.Action{System.String}},System.Action{System.String,System.Action{System.String}})">
            <inheritdoc cref="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.SetTransportImplementation(Crestron.DeviceDrivers.EntityModel.TransportTx,System.Action{System.String,System.Action{System.String}},System.Action{System.String,System.Action{System.String}})" />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityTransportTxChannel.UnsetTransportImplementation">
            <inheritdoc cref="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.UnsetTransportImplementation" />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityValueJsonConverter">
            <summary>
            Newtonsoft <see cref="T:Newtonsoft.Json.JsonConverter" /> that handles <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />s
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityValueJsonConverter.ConvertNullableValueFromToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Deserializes a <see cref="T:Newtonsoft.Json.Linq.JToken" /> to a nullable <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />
            <para>
            This will return null when the token type is <see cref="F:Newtonsoft.Json.Linq.JTokenType.Null" />, as opposed to
            <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityValueJsonConverter.ConvertValueFromToken(Newtonsoft.Json.Linq.JToken)" /> which would have returned a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> containing a null
            value instead of null itself.
            </para>
            </summary>
            <param name="token">The token to convert</param>
            <returns>A nullable <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> representing the <see cref="T:Newtonsoft.Json.Linq.JToken" /></returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityValueJsonConverter.ConvertValueFromToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Deserializes a <see cref="T:Newtonsoft.Json.Linq.JToken" /> into a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />
            </summary>
            <param name="token">The token to convert</param>
            <returns>The <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> representation</returns>
            <exception cref="T:System.InvalidCastException">Thrown when an unsupported token type is encountered</exception>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityValueJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityValueJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.DriverEntityValueJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance">
            <summary>
            Abstract class representing an Entity Model type
            <para>
            The methods on this class convert to/from <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> and the driver's desired representation.
            For <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.ReflectedAttributeDriverEntity" /> and similar implementations, the object is a built-in type or custom
            class.
            Other drivers may choose to convert in other ways, or simply return the existing <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> and
            convert use those to access the values in their methods.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.#ctor(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityTypeDefinition)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.Definition" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.CorrespondingType">
            <summary>
            The .NET type associated with this Entity Model type
            <para>
            Can be null if there is no such association.
            </para>
            <para>
            This is used by methods that automatically convert from .NET types to <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> to look up this
            instance when the <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.CorrespondingType" /> is encountered and use it for conversions.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.Definition">
            <summary>
            The type definition data to report to the application
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.InstanceCollectionFromValueCollection(System.Collections.Generic.ICollection{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <summary>
            Called to convert a collection of <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />s into a typed collection of the proper object type
            <para>
            For <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.ReflectedAttributeDriverEntity" /> and similar implementations, this returns a typed array.
            Argument conversions for command parameters and similar use cases will not tolerate an array of <see cref="T:System.Object" />s.
            </para>
            </summary>
            <param name="value">The incoming value to convert (can be null and this method should return null in that case)</param>
            <param name="typeLookup">
            Delegate to retrieve other <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance" />s based on the entity model type
            name (for converting sub-properties - using it to find the converter for this type will result in a recursive loop)
            </param>
            <returns>
            An object (generally a typed array of <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.CorrespondingType" /> objects) representing the converted
            value
            </returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.InstanceDictionaryFromValueDictionary(System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <summary>
            Called to convert a dictionary of <see cref="T:System.String" /> keys and <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> values into a typed
            dictionary of the proper object type
            <para>
            For <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.ReflectedAttributeDriverEntity" /> and similar implementations, this returns a typed dictionary.
            Argument conversions for command parameters and similar use cases will not tolerate a dictionary of
            <see cref="T:System.Object" />s.
            </para>
            </summary>
            <param name="value">The incoming value to convert (can be null and this method should return null in that case)</param>
            <param name="typeLookup">
            Delegate to retrieve other <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance" />s based on the entity model type
            name (for converting sub-properties - using it to find the converter for this type will result in a recursive loop)
            </param>
            <returns>
            An object (generally a typed dictionary of <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.CorrespondingType" /> objects) representing the
            converted value
            </returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.InstanceFromValue(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <summary>
            Called to convert a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> into an object of <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.CorrespondingType" /> or whatever
            type the driver is expecting to receive values as
            </summary>
            <param name="value">The value to convert</param>
            <param name="typeLookup">
            Delegate to retrieve other <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance" />s based on the entity model type
            name (for converting sub-properties - using it to find the converter for this type will result in a recursive loop)
            </param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.ToValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <summary>
            Converts an object of <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.CorrespondingType" /> (or whatever type the driver is using for this object) into a
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />.
            <para>
            For <see cref="T:System.Collections.Generic.IEnumerable`1" /> and <see cref="T:System.Collections.Generic.IDictionary`2" /> of these objects, this will be called for
            each value and the caller will assemble the collection.
            </para>
            </summary>
            <param name="o">The object to convert</param>
            <param name="typeLookup">
            Delegate to retrieve other <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance" />s based on the entity model type
            name (for converting sub-properties - using it to find the converter for this type will result in a recursive loop)
            </param>
            <returns></returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup">
            <summary>
            Retrieves an <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance" /> for the provided Entity Model type name
            <para>
            This method MUST accept null as an input and return null in that case.
            It MUST NOT throw an exception.
            </para>
            </summary>
            <param name="typeName">
            The name of the type, or null. If null is passed in, this must return null and not throw an
            exception.
            </param>
            <returns>The corresponding <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance" /> if one exists, otherwise null</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance">
            <summary>
            Represents an Entity Model event implementation, pairing the definition and functionality
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.#ctor(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEventDefinition,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEventMetadata)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.Definition" />
            </param>
            <param name="metadata">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.Metadata" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.Definition">
            <summary>
            The definition of this event to report to the application
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.Metadata">
            <summary>
            Metadata for this event to report to the application
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.Subscribe(System.Object,System.Action{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEvent},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <summary>
            Called by helper classes to subscribe to this event and retrieve an action to call to unsubscribe
            </summary>
            <param name="instance">
            The instance associated with the entity (to enable reuse of this <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance" />
            across multiple entities, although this is more for consistency with commands and properties due to complexities with
            handling subscribing properly)
            </param>
            <param name="eventHandler">The action to be invoked when the event is raised</param>
            <param name="typeLookup"><see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup" /> for use with converting data types</param>
            <returns>An action that, when invokes, unsubscribes from the event (un-registering <paramref name="eventHandler" />)</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionDoCommandExecutor">
            <summary>
            Helper class implementing "extension:doCommand" by mapping to normal Entity Model commands
            <para>
            Extension commands may not use namespaces (i.e. vacuum:start) and must instead be simple names such as "vacuumStart".
            This class implements "extension:doCommand" by calling the delegate provided to the constructor with the extension
            command name to retrieve the implementation.
            It then attempts to convert the string arguments to the correct types and call the entity model command.
            If a <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResult" />-compatible <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> is returned, it is fed back up
            as the result.
            </para>
            <para>
            The commands themselves must implement the <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance.ParameterOrder" /> property in order to properly
            match the "args" parameter to the <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance" />'s defined parameters (if any).
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionDoCommandExecutor.CommandName">
            <summary>
            Command name (key) for extension:doCommand
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionDoCommandExecutor.CommandDefinition">
            <summary>
            The <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition" /> for "extension:doCommand"
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionDoCommandExecutor.#ctor(System.Func{System.String,Crestron.DeviceDrivers.SDK.EntityModel.BoundItem{Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance}},Crestron.DeviceDrivers.SDK.IDriverLogger)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="commandLookup">Function which retrieves commands based on their names</param>
            <param name="logger">Logger to use for diagnostic messages</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionDoCommandExecutor.#ctor(System.Func{System.String,Crestron.DeviceDrivers.SDK.EntityModel.BoundItem{Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance}},Crestron.DeviceDrivers.SDK.IComponentLogger)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="commandLookup">Function which retrieves commands based on their names</param>
            <param name="logger">Logger to use for diagnostic messages</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionDoCommandExecutor.Execute(System.Object,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup,System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionObject">
            <summary>
            Base class for user-defined extension object types
            <para>
            Any objects used in extension drivers must derive from this to ensure that a valid <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionObject.ExtensionObjectId" /> is
            included.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionObject.ExtensionObjectId">
            <summary>
            The extension object ID that is passed in to commands which set property values on this object
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResult">
            <summary>
            Entity model data structure defining the result of an extension:doCommand call
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResult.TypeName">
            <summary>
            The name of this type for a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityTypeDefinition" />
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResult.ResultCode">
            <summary>
            Indicates either success or failure for the operation
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResult.UserMessage">
            <summary>
            When <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResult.ResultCode" /> is <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResultCode.Error" />, this describes the error (but can
            be null or empty in either case)
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResultCode">
            <summary>
            Possible result codes for "extension:doCommand"
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResultCode.Uninitialized">
            <summary>
            Indicates the property is uninitialized. It is an error to use this value.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResultCode.Success">
            <summary>
            The operation was successful
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionOperationResultCode.Error">
            <summary>
            An error occured while executing the operation
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionSetPropertyValueExecutor">
            <summary>
            Class which implements the "extension:setPropertyValue" command by matching the property name to a matching setter
            <para>
            The command must be prefixed with "set" and then the property name capitalized to formulate a proper camelCase name.
            For example, extension:setPropertyValue(property="activeLightShow", value="show1") would map to a command named
            "setActiveLightShow" that accepts a string parameter named "value".
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionSetPropertyValueExecutor.CommandName">
            <summary>
            Command name (key) for "extension:setPropertyValue"
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionSetPropertyValueExecutor.CommandDefinition">
            <summary>
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityCommandDefinition" /> for "extension:setPropertyValue"
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionSetPropertyValueExecutor.#ctor(System.Func{System.String,Crestron.DeviceDrivers.SDK.EntityModel.BoundItem{Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance}},Crestron.DeviceDrivers.SDK.IDriverLogger)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="commandLookup">Delegate which retrieves command instances based on their names</param>
            <param name="logger">Logger to write diagnostic messages to</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionSetPropertyValueExecutor.#ctor(System.Func{System.String,Crestron.DeviceDrivers.SDK.EntityModel.BoundItem{Crestron.DeviceDrivers.SDK.EntityModel.CommandInstance}},Crestron.DeviceDrivers.SDK.IComponentLogger)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="commandLookup">Delegate which retrieves command instances based on their names</param>
            <param name="logger">Logger to write diagnostic messages to</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ExtensionSetPropertyValueExecutor.Execute(System.Object,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup,System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})">
            <inhertdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.UiDefinitionProperty">
            <summary>
            Implementation of the "extension:uiDefinition" property which loads its value from an XML file in the "uidefinitions"
            subdirectory within the driver.
            <para>
            When using <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.UiDefinitionProperty.LoadFromDirectoryIfExists(System.String,Crestron.DeviceDrivers.SDK.IComponentLogger,Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel)" />, this loads the first XML file from that directory.
            The constructor can be used to specify a specific path in case there are multiple XML files.
            </para>
            <para>
            If the file is updated, the driver should raise the <see cref="E:Crestron.DeviceDrivers.EntityModel.DriverController.ValuesChanged" /> event for the
            "extension:uiDefinition" property (usually via
            <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.NotifyPropertyChanged(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue)" />
            ).
            The new value can be retrieved by calling <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.UiDefinitionProperty.GetValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)" />.
            The instance argument of <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.UiDefinitionProperty.GetValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)" /> is not used and may be null.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.UiDefinitionProperty.Name">
            <summary>
            The name (key) of the "extension:uiDefinition" command
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.UiDefinitionProperty.#ctor(System.String,Crestron.DeviceDrivers.SDK.IComponentLogger)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="filePath">Absolute path to the UI definition XML file</param>
            <param name="logger">Logger to write diagnostic messages to</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.UiDefinitionProperty.LoadFromDirectoryIfExists(System.String,Crestron.DeviceDrivers.SDK.IComponentLogger,Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel)">
            <summary>
            Loads an instance from the "uidefinitions" directory if such a file exists, or returns null if there is no such file
            </summary>
            <param name="driverDataDirectoryPath">
            The path to the extracted driver, typically from
            <see cref="P:Crestron.DeviceDrivers.SDK.DriverInitializationArgs.DriverDataDirectoryPath" />
            </param>
            <param name="logger">The logger to write diagnostic messages to</param>
            <param name="logLevelIfNotExist">
            The log level to use to report when the property does not exist (use
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel.Error" /> if the file should exist)
            </param>
            <returns>A <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.UiDefinitionProperty" /> instance, or null if one does not exist</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.UiDefinitionProperty.GetValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <summary>
            Retrieves the UI Definition property value, re-reading the file if the timestamp changed
            </summary>
            <param name="instance">Unused, can be null</param>
            <param name="typeLookup">Unused, can be null</param>
            <returns>
            The UI Definition property value (non-null, although the <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> could itself contain
            a null value)
            </returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity" /> that takes multiple <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity" /> implementations and
            merges them into a single entity
            <para>
            The contained instances may have overlapping types but may not have any overlapping properties, commands, or events.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.#ctor(System.String)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="controllerId">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.ControllerId" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.ControllerId">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.ExecuteCommand(System.String,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.GetState">
            <inheritdoc />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.SubControllers">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.Dispose">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.DefinitionChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.EventRaised">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.ValuesChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.SubControllersChanged">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.AddFragment(Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity)">
            <summary>
            Adds an instance of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity" />, merging in its functionality
            <para>
            Once all changes are complete, the caller is responsible for raising the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.DefinitionChanged" /> event
            by triggering a definition change on one of the fragments that are a part of this entity.
            </para>
            </summary>
            <param name="fragment">The entity to add</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.RemoveFragment(Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity)">
            <summary>
            Removes an instance of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity" />, removing its functionality
            <para>
            Once all changes are complete, the caller is responsible for raising the <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.FragmentedDriverEntity.DefinitionChanged" /> event
            by triggering a definition change on one of the fragments that are a part of this entity.
            </para>
            </summary>
            <param name="fragment">The entity to remove</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController">
            <summary>
            Implements the configuration workflow for a driver
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.ConfigurationItemsUpdated">
            <inheritdoc cref="E:Crestron.DeviceDrivers.EntityModel.DriverController.ConfigurationItemsUpdated"/>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.ConfigurationListChanged">
            <inheritdoc cref="E:Crestron.DeviceDrivers.EntityModel.DriverController.ConfigurationListChanged"/>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.StatusChanged">
            <inheritdoc cref="E:Crestron.DeviceDrivers.EntityModel.DriverController.StatusChanged"/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.ApplyConfiguration(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc cref="M:Crestron.DeviceDrivers.EntityModel.DriverController.ApplyConfiguration(System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.ApplyConfigurationStep(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc cref="M:Crestron.DeviceDrivers.EntityModel.DriverController.ApplyConfigurationStep(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.GetAllConfigurationValues">
            <inheritdoc cref="M:Crestron.DeviceDrivers.EntityModel.DriverController.GetAllConfigurationValues(System.String)"/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.GetFirstConfigurationStep">
            <inheritdoc cref="M:Crestron.DeviceDrivers.EntityModel.DriverController.GetFirstConfigurationStep(System.String)"/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.GetStatus">
            <inheritdoc cref="M:Crestron.DeviceDrivers.EntityModel.DriverController.GetStatus(System.String)"/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.SetTransportImplementation(Crestron.DeviceDrivers.EntityModel.TransportTx,System.Action{System.String,System.Action{System.String}},System.Action{System.String,System.Action{System.String}})">
            <summary>
            Called to connect up the delegates to send and receive data
            </summary>
            <param name="tx">Delegate to send data on a communications channel</param>
            <param name="rxSubscribeAction">Delegate to subscribe to data from a communications channel</param>
            <param name="rxUnsubscribeAction">Delegate to unsubscribe from data from a communications channel</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController.UnsetTransportImplementation">
            <summary>
            Called during cleanup when the containing entity is being disposed or when being reconfigured.
            <para>
            Implementations of this interface should unsubscribe from any transport channels and
            handle any other cleanup (such as changing any statues to "offline" etc.)
            </para>
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization">
            <summary>
            Interface used within the driver SDK to support the localization features of <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverController"/>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization.SupportedCultures">
            <inheritdoc cref="P:Crestron.DeviceDrivers.EntityModel.DriverController.SupportedCultures"/>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization.GetLanguageTranslations(System.String)">
            <inheritdoc cref="M:Crestron.DeviceDrivers.EntityModel.DriverController.GetLanguageTranslations(System.String)"/>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization.SupportedCulturesChanged">
            <inheritdoc cref="E:Crestron.DeviceDrivers.EntityModel.DriverController.SupportedCulturesChanged"/>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization.LanguageTranslationsChanged">
            <inheritdoc cref="E:Crestron.DeviceDrivers.EntityModel.DriverController.LanguageTranslationsChanged"/>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.DefinitionChanged">
            <summary>
            Must be raised whenever a command, property, event, or type is added, removed, or modified.
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.EventRaised">
            <summary>
            Must be raised whenever a driver event occurs (similar to <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.ValuesChanged"/>, but for stateless events)
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.ValuesChanged">
            <summary>
            Must be raised whenever a property value changes
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.SubControllersChanged">
            <summary>
            Must be raised whenever <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.SubControllers"/> changes
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.ControllerId">
            <summary>
            The unique (within the driver) controller ID for this entity
            <para>
            Usually <see cref="F:Crestron.DeviceDrivers.EntityModel.DriverController.RootControllerId"/> unless this is
            a child device or component of a driver.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.ExecuteCommand(System.String,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},System.Action{Crestron.DeviceDrivers.EntityModel.DriverEntityCommandResult})">
            <summary>
            Method that executes a command directed at this entity.
            <para>
            Results are returned via a callback since most driver operations are asynchronous.
            The callback may be null if the application is going to ignore the operation result.
            If supplied, however, implementations of this interface MUST call the callback.
            </para>
            </summary>
            <param name="command">The name of the command to execute</param>
            <param name="args">Dictionary of command arguments, keyed by argument names</param>
            <param name="resultCallback">Callback to return results, or null.</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.GetState">
            <summary>
            Retrieves the definitions of supported features and present values of properties.
            <para>
            While this may be called at any time, it is intended to be called infrequently.
            Generally, this should be called once at startup, and again whenever <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.DefinitionChanged"/>
            is raised. Other updates should propagate through <see cref="E:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.ValuesChanged"/>.
            </para>
            </summary>
            <returns>An immutable <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityState"/> with the definitions and values</returns>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.IDriverEntity.SubControllers">
            <summary>
            Collection of contained sub-controllers (might be empty if none apply)
            <para>
            The driver SDK recursively collects these in <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity"/> to present
            a comprehensive list.
            </para>
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.JsonDriverEntryPoint">
            <summary>
            Abstract class to help data-driven drivers implement <see cref="T:Crestron.DeviceDrivers.EntityModel.DriverAssemblyEntryPoint" />
            <para>
            Derived classes need only fill in the name of the JSON embedded resource
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.JsonDriverEntryPoint.#ctor(System.String)">
            <summary>
            Initialize given the name of the embedded resource with the JSON data file
            </summary>
            <param name="jsonEmbeddedResourceName">The name of the JSON embedded resource</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.JsonDriverEntryPoint.CreateDriverControllerInstance(Crestron.DeviceDrivers.EntityModel.DriverControllerCreationArgs)">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ManuallyRaisedEventInstance">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance" /> that raises events when <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.ManuallyRaisedEventInstance.RaiseEvent(System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue})" /> is called
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ManuallyRaisedEventInstance.#ctor(System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEventDefinition,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEventMetadata)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="eventId">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.ManuallyRaisedEventInstance.Id" />
            </param>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.Definition" />
            </param>
            <param name="metadata">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.Metadata" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.ManuallyRaisedEventInstance.Id">
            <summary>
            The entity model event ID (name)
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ManuallyRaisedEventInstance.Subscribe(System.Object,System.Action{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEvent},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ManuallyRaisedEventInstance.RaiseEvent(System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue})">
            <summary>
            Raises the event, notifying the application via <see cref="E:Crestron.DeviceDrivers.EntityModel.DriverController.EventRaised" />
            </summary>
            <param name="eventValue">
            The value to include with the event, or null if there is no associated value defined. If there
            is a value but that value is null, the <paramref name="eventValue" /> must be a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />
            containing null rather than null itself.
            </param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ModelSerialization">
            <summary>
            Contains helper methods for converting Entity Model data to/from JSON
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.ModelSerialization.Settings">
            <summary>
            Serialization settings to use for unified platform operations
            </summary>
            <remarks>DO NOT modify these. Use <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.ModelSerialization.MakeSettings" /> if you need to customize</remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ModelSerialization.MakeSettings">
            <summary>
            Create a new mutable instance of JsonSerializerSettings
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> instance that the caller is free to modify</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ModelSerialization.ToJson(System.Object,System.Boolean)">
            <summary>
            Helper method to convert an object to JSON using Entity Model <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.ModelSerialization.Settings" />
            </summary>
            <param name="value">The value to convert</param>
            <param name="indented">Whether to format the JSON in readable, indented form</param>
            <returns>The serialized string</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger">
            <summary>
            Logger for a particular controller within a driver
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger._controllerId">
            <summary>
            The ID of this controller
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger._logger">
            <summary>
            Parent logger
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.IsEnabled(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel)">
            <summary>
            Checks if the current logging level will allow a
            log entry at the specified <paramref name="level" /> to be logged.
            <para>
            This method should be used to prevent unnecessary execution of logging code.
            For example, code that requires computations in the message arguments,
            passing of value types (because they will be boxed)
            or a loop that does nothing but log information.
            </para>
            </summary>
            <param name="level">Log entry level to check.</param>
            <returns>True if the specified level will allow the entry to be logged.</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.Exception(System.Exception,System.String,System.Object[])">
            <summary>
            Writes an exception to the hosting app/program's log.
            <para>
            It is recommended that calls made to this exception-logging-method are not guarded by checks of
            the current logging level so that any exceptions that occur are always logged.
            </para>
            </summary>
            <param name="ex">The exception that occurred</param>
            <param name="message">Additional message format string to log along with the exception</param>
            <param name="args">Format args for <paramref name="message"/></param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.GetCurrentLevel">
            <summary>
            Gets the current logging level
            </summary>
            <remarks><see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.IsEnabled(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel)"/> should be used to check if logging is enabled at a particular level.</remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.Log(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel,System.String)">
            <summary>
            Writes a log entry/message to the hosting app/program's log
            </summary>
            <param name="level">Log entry level associated with this message</param>
            <param name="message">The string to write to the log</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.Log(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel,System.String,System.Object[])">
            <summary>
            Writes a log entry/message to the hosting app/program's log
            </summary>
            <param name="level">Log entry level associated with this message</param>
            <param name="message">The format string to write to the log</param>
            <param name="args">Format args for <paramref name="message"/></param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.Log``1(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel,System.String,``0)">
            <summary>
            Overload of the method <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.Log(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel,System.String,System.Object[])"/>
            provided to match .NET's various string formatting overloads to avoid unnecessarily
            creating an object array when there is only 1 message format argument.
            See that Log method for more details.
            </summary>
            <param name="level">Log entry level associated with this message</param>
            <param name="message">The format string to write to the log</param>
            <param name="arg1">First format arg for <paramref name="message"/></param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.Log``2(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel,System.String,``0,``1)">
            <summary>
            Overload of the method <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.Log(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel,System.String,System.Object[])"/>
            provided to match .NET's various string formatting overloads to avoid unnecessarily
            creating an object array when there are exactly 2 message format arguments.
            See that Log method for more details.
            </summary>
            <param name="level">Log entry level associated with this message</param>
            <param name="message">The format string to write to the log</param>
            <param name="arg1">First format arg for <paramref name="message"/></param>
            <param name="arg2">Second format arg for <paramref name="message"/></param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.Log``3(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel,System.String,``0,``1,``2)">
            <summary>
            Overload of the method <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.NestedDriverControllerLogger.Log(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel,System.String,System.Object[])"/>
            provided to match .NET's various string formatting overloads to avoid unnecessarily
            creating an object array when there are exactly 3 message format arguments.
            See that Log method for more details.
            </summary>
            <param name="level">Log entry level associated with this message</param>
            <param name="message">The format string to write to the log</param>
            <param name="arg1">First format arg for <paramref name="message"/></param>
            <param name="arg2">Second format arg for <paramref name="message"/></param>
            <param name="arg3">Third format arg for <paramref name="message"/></param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController">
            <summary>
            Singleton implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController" /> for use when no configuration is required.
            <para>
            The only instance of this class should be the singleton <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.Instance" /> property.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.Instance">
            <summary>
            Singleton implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverConfigurationController" /> for use when no configuration is required.
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.ConfigurationItemsUpdated">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.ConfigurationListChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.StatusChanged">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.ApplyConfiguration(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.ApplyConfigurationStep(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.GetAllConfigurationValues">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.GetFirstConfigurationStep">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.GetStatus">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.SetTransportImplementation(Crestron.DeviceDrivers.EntityModel.TransportTx,System.Action{System.String,System.Action{System.String}},System.Action{System.String,System.Action{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NoConfigurationController.UnsetTransportImplementation">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.NoLocalization">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization" /> for drivers that do not support localization.
            <para>
            The only instance of this class should be the singleton <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.NoLocalization.Instance" />.
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.EntityModel.NoLocalization.Instance">
            <summary>
            Singleton implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.IDriverControllerLocalization" /> for drivers that do not support localization.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.NoLocalization.SupportedCultures">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NoLocalization.GetLanguageTranslations(System.String)">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.NoLocalization.SupportedCulturesChanged">
            <inheritdoc />
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.EntityModel.NoLocalization.LanguageTranslationsChanged">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.NonConvertingEntityTypeInstance">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance" /> that skips all conversions and just passes the
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> on through as-is
            <para>
            Used when the driver does not want or need to convert to .NET types automatically.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NonConvertingEntityTypeInstance.#ctor(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityTypeDefinition)">
            <inheritdoc />
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.NonConvertingEntityTypeInstance.CorrespondingType">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NonConvertingEntityTypeInstance.InstanceCollectionFromValueCollection(System.Collections.Generic.ICollection{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NonConvertingEntityTypeInstance.InstanceDictionaryFromValueDictionary(System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NonConvertingEntityTypeInstance.InstanceFromValue(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.NonConvertingEntityTypeInstance.ToValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance">
            <summary>
            Represents the definition and implementation of an Entity Model property
            <para>
            This includes retrieving the property value but does not handle any change events.
            Events are all handled externally by the driver.
            </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance.#ctor(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityPropertyDefinition,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityPropertyMetadata)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance.Definition" />
            </param>
            <param name="metadata">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance.Metadata" />
            </param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance.Definition">
            <summary>
            The property definition to report to the application
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance.Metadata">
            <summary>
            The property metadata to report to the application
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance.GetValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <summary>
            Method to retrieve the value of this property
            </summary>
            <param name="instance">
            The instance associated with the entity (provided to allow reuse of the same
            <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance" /> across multiple entities)
            </param>
            <param name="typeLookup">
            Delegate to retrieve type converters for use with creating the
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />
            </param>
            <returns>
            A <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> for the property, or null if there is no current value (for a current value
            that is itself null, the outer nullable should not be null - there should be a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />
            instance that contains null)
            </returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ReflectedAttributeDriverEntity">
            <summary>
            Base class to derive from and declare properties, commands, and events
            with entity model attributes.
            <para>
            Registers itself via <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RegisterObjectWithAttributes(System.Object)"/>.
            That can be called again with other attributes to delegate responsibilities to
            dedicated handler classes.
            </para>
            <para>
            See the documentation for <see cref="M:Crestron.DeviceDrivers.SDK.EntityModel.BaseDriverEntity.RegisterObjectWithAttributes(System.Object)"/>
            for more details on using the attributes
            </para>
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.ReflectionEventInstance">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance" /> that uses reflection to subscribe to a .NET event and convert it to an
            Entity Model event
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ReflectionEventInstance.#ctor(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEventDefinition,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEventMetadata,Crestron.SimplSharp.Reflection.EventInfo,System.String,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance})">
            <summary>
            Initialize with required properties
            </summary>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.Definition" />
            </param>
            <param name="metadata">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EventInstance.Definition" />
            </param>
            <param name="eventInfo">The .NET <see cref="T:Crestron.SimplSharp.Reflection.EventInfo" /> for the event</param>
            <param name="eventId">The Entity Model name (key) of the event</param>
            <param name="properties">
            A collection of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance" />s that provide the properties of the event data
            (if applicable, otherwise null)
            </param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.ReflectionEventInstance.Subscribe(System.Object,System.Action{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityEvent},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.TypeBasedEntityTypeInstance">
            <summary>
            Implementation of <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance" /> that uses reflection and <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Attributes.EntityPropertyAttribute" />s to
            convert types
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.TypeBasedEntityTypeInstance.#ctor(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityTypeDefinition,System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance},Crestron.SimplSharp.Reflection.CType)">
            <summary>
            Initialize with required properties
            </summary>
            <param name="definition">
            <see cref="P:Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeInstance.Definition" />
            </param>
            <param name="properties">The <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.PropertyInstance" />s that make up the properties of the type</param>
            <param name="type">The .NET type associated with this Entity Model type (cannot be null in this context)</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.EntityModel.TypeBasedEntityTypeInstance.CorrespondingType">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.TypeBasedEntityTypeInstance.InstanceCollectionFromValueCollection(System.Collections.Generic.ICollection{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.TypeBasedEntityTypeInstance.InstanceDictionaryFromValueDictionary(System.Collections.Generic.IDictionary{System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.TypeBasedEntityTypeInstance.InstanceFromValue(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.TypeBasedEntityTypeInstance.ToValue(System.Object,Crestron.DeviceDrivers.SDK.EntityModel.EntityTypeLookup)">
            <inheritdoc />
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Util.DriverEntityValueExtensions">
            <summary>
            Implements extension methods for <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue"/>s
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.DriverEntityValueExtensions.ConvertedValueEquals(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,System.StringComparison)">
            <summary>
            Compares two <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />s, converting any string values to facilitate the comparison
            <para>
            For example, this method would return true for a pair of values 0 and "0" since the converted values are equal.
            </para>
            </summary>
            <param name="v">The first value to compare</param>
            <param name="other">The second value to compare</param>
            <param name="comparison">The string comparison type to use when converting values</param>
            <returns>True if the values or their string representations are equal</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.DriverEntityValueExtensions.ConvertedValueEquals(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,System.Boolean)">
            <summary>
            Compares a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> with a <see cref="T:System.Boolean" /> value, converting the value to a string if
            necessary before comparing in a case-insensitive manner
            <para>
            For example, this method would return true for a pair of values "TRUE" and true since the converted values are equal.
            </para>
            </summary>
            <param name="v">The first value to compare</param>
            <param name="other">The second value to compare</param>
            <returns>True if the values or their string representations are equal</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.DriverEntityValueExtensions.ConvertedValueEquals(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,System.Int64)">
            <summary>
            Compares a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> with a <see cref="T:System.Int64" /> value, converting the value to a string if
            necessary before comparing
            <para>
            For example, this method would return true for a pair of values "0" and 0 since the converted values are equal.
            </para>
            </summary>
            <param name="v">The first value to compare</param>
            <param name="other">The second value to compare</param>
            <returns>True if the values or their string representations are equal</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.DriverEntityValueExtensions.ConvertedValueEquals(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,System.Double)">
            <summary>
            Compares a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> with a <see cref="T:System.Double" /> value, converting the value to a string if
            necessary before comparing in a case-insensitive manner
            <para>
            For example, this method would return true for a pair of values "0.5" and 0.5 since the converted values are equal.
            </para>
            </summary>
            <param name="v">The first value to compare</param>
            <param name="other">The second value to compare</param>
            <returns>True if the values or their string representations are equal</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.DriverEntityValueExtensions.ConvertedValueEquals(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,System.String,System.StringComparison)">
            <summary>
            Compares a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> with a <see cref="T:System.String" /> value, converting the value to a string if
            necessary before comparing in a case-insensitive manner
            <para>
            For example, this method would return true for a pair of values "TRUE" and true since the converted values are equal.
            </para>
            </summary>
            <param name="v">The first value to compare</param>
            <param name="other">The second value to compare</param>
            <param name="stringComparison">The string comparison type to use when comparing values</param>
            <returns>True if the values or their string representations are equal</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.DriverEntityValueExtensions.GetStringRepresentationOrNull(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue)">
            <summary>
            Converts a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> to a string, or returns null if the value is null
            <para>
            <see cref="T:System.String" /> values are returned as-is.
            Numeric values are converted using <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            Boolean values use the lower-case constants "true" and "false".
            Lists and dictionaries are serialized as JSON using entity model standard settings.
            </para>
            </summary>
            <param name="v">The value to convert</param>
            <returns>A string representation, or null if the value is null</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.DriverEntityValueExtensions.TryGetOrConvertValue(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,System.Boolean@,System.Action)">
            <summary>
            Tries to get a <see cref="T:System.Boolean" /> from a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />, converting the string values "true" and
            "false" (case-insensitive) as necessary
            </summary>
            <param name="v">The value to convert</param>
            <param name="result">The resulting value (if the return value is true)</param>
            <param name="failureAction">Optional action to invoke when getting the value fails (often used to log the error)</param>
            <returns>
            True if <paramref name="result" /> is valid and the value was a <see cref="T:System.Boolean" /> or could be converted to
            one
            </returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.DriverEntityValueExtensions.TryGetOrConvertValue(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,System.Int64@,System.Action)">
            <summary>
            Tries to get a <see cref="T:System.Boolean" /> from a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />, converting string values as necessary
            </summary>
            <param name="v">The value to convert</param>
            <param name="result">The resulting value (if the return value is true)</param>
            <param name="failureAction">Optional action to invoke when getting the value fails (often used to log the error)</param>
            <returns>
            True if <paramref name="result" /> is valid and the value was a <see cref="T:System.Boolean" /> or could be converted to
            one
            </returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.DriverEntityValueExtensions.TryGetOrConvertValue(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,System.Double@,System.Action)">
            <summary>
            Tries to get a <see cref="T:System.Double" /> from a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" />, converting string values as necessary
            </summary>
            <param name="v">The value to convert</param>
            <param name="result">The resulting value (if the return value is true)</param>
            <param name="failureAction">Optional action to invoke when getting the value fails (often used to log the error)</param>
            <returns>
            True if <paramref name="result" /> is valid and the value was a <see cref="T:System.Double" /> or could be converted to
            one
            </returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.EntityModel.Util.EntityModelUtils">
            <summary>
            Contains helper methods for common Entity Model operations
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.EntityModelUtils.CombineUpdates(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate)">
            <summary>
            Combines two <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate" /> objects to gather all the update operations
            </summary>
            <param name="previousUpdate">The original update object</param>
            <param name="newUpdate">The newer update object to add</param>
            <returns>The combined <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate" /></returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.EntityModelUtils.CreateDictionaryUpdate(System.Int32,System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueDictionary,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueDictionary)">
            <summary>
            Creates a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate" /> between two dictionaries with the given index and key, or returns null
            if there is no update (same values)
            </summary>
            <param name="index">The array index this update is at, or 0 if n/a</param>
            <param name="key">The dictionary key that points to this update, or null if n/a</param>
            <param name="prevDictionary">The previous value</param>
            <param name="newDictionary">The new value</param>
            <returns>
            The new <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate" /> between the previous and new values, or null if they are the
            same value
            </returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.EntityModelUtils.CreateListUpdate(System.Int32,System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueList,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueList)">
            <summary>
            Creates a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate" /> between two lists with the given index and key, or returns null if
            there is no update (same values)
            </summary>
            <param name="index">The array index this update is at, or 0 if n/a</param>
            <param name="key">The dictionary key that points to this update, or null if n/a</param>
            <param name="prevList">The previous value</param>
            <param name="newList">The new value</param>
            <returns>
            The new <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate" /> between the previous and new values, or null if they are the
            same value
            </returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.EntityModelUtils.CreateUpdate(System.Int32,System.String,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue)">
            <summary>
            Creates a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate" /> between two values with the given index and key, or returns null if
            there is no update (same values)
            </summary>
            <param name="index">The array index this update is at, or 0 if n/a</param>
            <param name="key">The dictionary key that points to this update, or null if n/a</param>
            <param name="prev">The previous value</param>
            <param name="value">The new value</param>
            <returns>
            The new <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate" /> between the previous and new values, or null if they are the
            same value
            </returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.EntityModelUtils.FilterValues(System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},System.Func{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue}},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Recursively process the given value, replacing/removing values by calling the specified function
            </summary>
            <param name="value">The value to process</param>
            <param name="filterFunc">
            A function that is called with each value to provide a new value, or null if the value should
            be removed
            </param>
            <param name="includeCollections">
            If true, call <paramref name="filterFunc" /> with values that are collections instead
            of recursively iterating into the collection itself
            </param>
            <param name="includeKeys">
            If true, call <paramref name="filterFunc" /> for keys of dictionaries in addition to the
            values
            </param>
            <param name="includeFilteredCollections">
            When true, call <paramref name="filterFunc" /> again if the resulting filtered
            value is a collection
            </param>
            <returns>The new value, rebuilt by applying the <paramref name="filterFunc" /></returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.EntityModelUtils.GetItemFromDictionaryIfExists``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Tries to retrieve a value from a dictionary, return the default if the dictionary is null or the value is missing
            </summary>
            <typeparam name="TKey">The key type for the dictionary</typeparam>
            <typeparam name="TValue">The value type for the dictionary</typeparam>
            <param name="dict">The dictionary (can be null)</param>
            <param name="key">The key to retrieve the value for (cannot be null)</param>
            <returns>The dictionary value, or the default for the type if there is none</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.EntityModelUtils.UpdateItemValues(Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue,System.Collections.Generic.ICollection{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate})">
            <summary>
            Updates a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> using a <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate.Changes" /> collection
            </summary>
            <param name="originalValue">The previous value, or null if there is none</param>
            <param name="updates">The updates to apply</param>
            <returns>The new value</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.EntityModel.Util.EntityModelUtils.UpdateValue(System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue},Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate)">
            <summary>
            Updates a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue" /> using a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValueUpdate" />, applying any index/key/value
            changes as necessary
            </summary>
            <param name="originalValue">The previous value, or null if there is none</param>
            <param name="update">The update to apply</param>
            <returns>The new value, or null if the original value was null and the update did not contain the full value</returns>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Events.StateControllerEventArgs`1.Value">
            <summary>
                New value being referred to by the event that was raised
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Events.TransportRxEventArgs.#ctor">
            <summary>
            Force use of factory Library mechanism below
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Events.TransportRxEventArgs.CheckOut">
            <summary>
            Implement this factory method using the Library checkout/return pattern
            </summary>
            <returns>instance of TransportRxEventArgs</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Events.TransportRxEventArgs.Return(Crestron.DeviceDrivers.SDK.Events.TransportRxEventArgs)">
            <summary>
            Return the item to the Library
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.TemplateString.Parse(System.String)">
            <summary>
                Parses a TemplateString
            </summary>
            <param name="s">Input string to parse (may NOT be null)</param>
            <returns>Parsed ITemplateString</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.TemplateString.CreateFrom(System.Nullable{Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue})">
            <summary>
                Creates and/or parses an <see cref="T:Crestron.DeviceDrivers.SDK.ITemplateString"/> from a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DriverEntityValue"/>
            </summary>
            <param name="value">Input value to parse</param>
            <returns>Parsed ITemplateString</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.TemplateString.ParseOptional(System.String)">
            <summary>
                Parses a TemplateString where the incoming string may be null
            </summary>
            <param name="s">Input string to parse (may be null)</param>
            <returns>Parsed ITemplateString, or null if the input was null</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.DriverLogger.SetMinLoggingLevel(Crestron.DeviceDrivers.EntityModel.Logging.LogEntryLevel)">
            <summary>
            Forces logging to a certain level regardless of what the application says
            </summary>
            <remarks>Used for debugging purposes</remarks>
            <param name="level">The minimum log level that must always be enabled</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.IDriverLogger">
            <summary>
                Provides the interface for controllers to send log messages.
                Does NOT provide methods to control the logging level, read messages,
                etc.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Attributes.DriverParameterAttribute.ParameterIndex">
            <summary>
            Used to control the order of appearance in the UI and in serialization
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationDefinition.DriverInstanceIdentifier">
            <summary>
            Template string used to build a unique instance identifier for this driver
            <para>
            Typically factor in things like MAC Address or other identifiers to distinguish
            between data store keys for multiple instances of the same driver
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationDefinition.MinTimeBetweenCommands">
            <summary>
            Global minimum time between commands that stretches across all transports
            </summary>
            <para>Transports have their own inter-command delay that applies only to spacing commands within that transport.</para>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition">
            <summary>
            Defines a configuration item to be used in a <see cref="T:Crestron.DeviceDrivers.SDK.ConfigurationStepDefinition"/>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Availability">
            <summary>
            Indicates when the configuration item should be available.
            See <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemAvailability" /> for valid options.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.AvailableValues">
            <summary>
            The list of valid values that can be applied to the <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.CurrentValue" />.  This field is
            optional and may be null.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.CurrentValue">
            <summary>
            Sets the initial state of the reported <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.CurrentValue" />.
            This is primarily used in conjunction with <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.CurrentValueDisplayOverride"/> for
            URL items with a <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.UsageContext"/> of <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Generic.Url"/>,
            where this would be the URL to link to.
            </summary>
            <remarks>
            This value is an SDK "Template String" which is used in data-driven drivers.
            Any literal "{" or "}" characters must be escaped by doubling them, i.e. "{{" or "}}".
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.CurrentValueDisplayOverride">
            <summary>
            Sets the display value of the initial state of the reported <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.CurrentValue" />.
            This is primarily used in conjunction with <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.CurrentValueDisplayOverride"/> for
            URL items with a <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.UsageContext"/> of <see cref="F:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Generic.Url"/>,
            where this would be the displayed text.
            </summary>
            <remarks>
            This value is an SDK "Template String" which is used in data-driven drivers.
            Any literal "{" or "}" characters must be escaped by doubling them, i.e. "{{" or "}}".
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.DefaultValue">
            <summary>
            Indicates what the default value of the <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> should be.  A value of null indicates that
            there is no default value.
            </summary>
            <remarks>
            This value is an SDK "Template String" which is used in data-driven drivers.
            Any literal "{" or "}" characters must be escaped by doubling them, i.e. "{{" or "}}".
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Description">
            <summary>
            Provides additional details about this item. If the <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.DescriptionLocalizationKey" /> field is populated,
            that will be preferred when the application supports localization.
            </summary>
            <para>
            For example, a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> for a MAC Address, could have a title of "MAC Address" and a
            description of "Enter the MAC Address of the
            driver device using the following format XX:XX:XX:XX:XX:XX
            </para>
            <remarks>
            This value is an SDK "Template String" which is used in data-driven drivers.
            Any literal "{" or "}" characters must be escaped by doubling them, i.e. "{{" or "}}".
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.DescriptionLocalizationKey">
            <summary>
            The translation key for the description of this item.  This field supersedes <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Description" /> when populated.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Id">
            <summary>
            The unique Id of this configuration item.  All <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Id" /> must be unique for a given driver device.
            This Id must persist across reboots in order for the driver to associate the correct settings on a reboot.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.InteractiveOnly">
            <summary>
            Indicates that this item is only used when interactively configuring the driver with steps
            and is not to be listed in the driver .dat file
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Masked">
            <summary>
            Indicates that the <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.DefaultValue" /> and <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.CurrentValue" /> contain sensitive
            information and should not be displayed (Ex. A password field)
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.MaxValue">
            <summary>
            Indicates what the maximum value is for the <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.CurrentValue" />.  For numeric values (
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.Number" />, <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.Hex" />) this is an upper bound
            on the value of the number.
            For string values <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.String" /> this field represents the maximum number of
            characters allowed in the string.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.MinValue">
            <summary>
            Indicates what the minimum value is for the <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.CurrentValue" />.  For numeric values (
            <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.Number" />, <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.Hex" />) this is a lower bound
            on the value of the number.
            For string values <see cref="F:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType.String" /> this field represents the minimum number of
            characters required in the string.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.NonInteractiveDescription">
            <summary>
            An alternate description to store in the driver .dat file for this item.
            If not specified, <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Description"/> is used.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.NonInteractiveDescriptionLocalizationKey">
            <summary>
            An alternate description localization key to store in the driver .dat file for this item.
            If not specified, <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.DescriptionLocalizationKey"/> is used.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.NonInteractiveTitle">
            <summary>
            An alternate title to store in the driver .dat file for this item.
            If not specified, <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Title"/> is used.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.NonInteractiveTitleLocalizationKey">
            <summary>
            An alternate title localization key to store in the driver .dat file for this item.
            If not specified, <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.TitleLocalizationKey"/> is used.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Persistent">
            <summary>
            Indicates that the <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.CurrentValue" /> must be stored by the consuming application and
            sent to the driver on initialization.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.ReadOnly">
            <summary>
            Indicates that the <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValue.CurrentValue" /> can not be assigned a different value.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Required">
            <summary>
            Specifies where or not this item is required or optional.
            Eg. Username and password may be optional while IP Address is required.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Title">
            <summary>
            A user visible heading for this item.  The value should be concise and direct (eg. MAC Address, Registration Code).
            If the <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.TitleLocalizationKey" /> is populated, that will be preferred when the application supports localization.
            </summary>
            <remarks>
            This value is an SDK "Template String" which is used in data-driven drivers.
            Any literal "{" or "}" characters must be escaped by doubling them, i.e. "{{" or "}}".
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.TitleLocalizationKey">
            <summary>
            The translation key for the title of this item.  This field supersedes <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Title" /> when populated.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Transformations">
            <summary>
            When used in data-driven drivers, these transformations are applied before building the item
            and during processing of incoming items for validation and storage purposes.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.TransportIdForChannelId">
            <summary>
            When using SDK transports for data driven drivers, specifies the ID of the transport to send this item
            and connect to.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.UsageContext">
            <summary>
            Provides information about the usage of the configuration item.  The value must be set to a value from
            <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext" />.
            For example, if the configuration item is for a RS-232 port, the <see cref="T:Crestron.DeviceDrivers.SDK.EntityModel.Data.ConfigurationItemContext.Com" /> options
            provides the consumer of this
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> with contextual information about this item's intended usage.  This information will
            also be used to determine
            whether or not a <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> will be displayed or handled internally.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.UsageContextGroupId">
            <summary>
            Optional group id that creates an association between various configuration items and their usage context.
            For example, a device with multiple relay ports would use this <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.UsageContextGroupId" /> to associate the
            <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem" /> with the port that it is for.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Validation">
            <summary>
            List of validation steps to perform on this item
            </summary>
            <remarks>
            Not required. Only used in conjunction with other data driven driver components.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.ValueType">
            <summary>
            Indicates the data type of the <see cref="P:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItem.Value" />. See <see cref="T:Crestron.DeviceDrivers.EntityModel.Data.DeviceConfiguration.ConfigurationItemValueType" />
            for valid options.
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.ConfigurationStepDefinition">
            <summary>
            Defines a configuration step to be shown during the driver configuration process
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationStepDefinition.ConditionalSteps">
            <summary>
            Defines some conditional sub-steps after this one
            </summary>
            <remarks>
            Only supported for data-driven drivers
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationStepDefinition.Items">
            <summary>
            List of <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationItemDefinition.Id" />s for items included in this step
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationStepDefinition.NextStep">
            <summary>
            The <see cref="P:Crestron.DeviceDrivers.SDK.ConfigurationStepDefinition.StepId" /> of the next step after this one
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationStepDefinition.StepId">
            <summary>
            The unique identifier for this step.
            This is not shown to the user and is arbitrarily defined by the driver developer.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationStepDefinition.Transformations">
            <summary>
            When used in data driven drivers, defines value transformations to apply before evaluating
            conditional steps and performing validation
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationStepDefinition.TransportItems">
            <summary>
            When using SDK transports, their Ids can be listed here to include their configuration items in this step.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ConfigurationStepDefinition.Validation">
            <summary>
            When used in data-driven drivers, specifies the step-wide validation to perform when this step is applied.
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.DeveloperInformationDefinition">
            <summary>
            Provides developer contact information for support for the driver.
            This information is fed into the driver's dat file.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.DeveloperInformationDefinition.Company">
            <summary>
            The company name of the driver developer
            <para>
            Drivers published by the same company must all use the exact same string here
            so that they can be programatically associated with each other.
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.DeveloperInformationDefinition.Contact">
            <summary>
            Name of contact for the developer at the <see cref="P:Crestron.DeviceDrivers.SDK.DeveloperInformationDefinition.Company"/>.
            This may be an individual or group name to direct any support inquiries to.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.DeveloperInformationDefinition.Email">
            <summary>
            Email address for support from the driver developer
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.DeveloperInformationDefinition.Website">
            <summary>
            URL for the developer's website
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.DeveloperInformationDefinition.PhoneNumber">
            <summary>
            Contact phone number for support from the developer
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.DriverConfig.ConsoleLogging">
            <summary>
                If set to true, all logging will also show up in the console
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.DriverConfig.LoggingLevel">
            <summary>
                Sets the minimum logging level of the driver
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.DriverConfigFile.Load(System.String)">
            <summary>
                Loads a specific config for the driver, or defaults if not specified
            </summary>
            <param name="driverId">The driver ID to get configuration for</param>
            <returns>The configuration</returns>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.DriverControllerDefinition.EntitySources">
            <summary>
            List of controller state names, each of which should contain a dictionary where
            keys are entity ids and values are lists of features from their SubDevice entry
            that are supported by the entity
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ExtensionDeviceDataDefinition.IsExtensionDevice">
            <summary>
            True if this driver implements the extension device interfaces
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ExtensionDeviceDataDefinition.IsMediaDevice">
            <summary>
            True if this device is a media device (i.e. Custom A/V Switcher)
            </summary>
            <remarks>
            At the time of writing, this support was abandoned and this flag will not be needed.
            However, it does exist in the .dat file, so in case it ever is reassigned some future meaning,
            it is defined here now for completeness.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.ExtensionDeviceDataDefinition.IsMediaSource">
            <summary>
            True is this device is a media source (i.e. Custom Media Server, Custom NVR)
            </summary>
            <remarks>
            At the time of writing, this support was abandoned and this flag will not be needed.
            However, it does exist in the .dat file, so in case it ever is reassigned some future meaning,
            it is defined here now for completeness.
            </remarks>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.GeneralInformationDefinition.Developer">
            <summary>
            Driver developer contact information
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.GeneralInformationDefinition.DependencyGroup">
            <summary>
            Constant used to identify drivers which rely on some shared dependency
            like a static singleton instance.
            Drivers with the same dependency group must be loaded into the same context (process, app domain)
            as each other to function properly.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.GeneralInformationDefinition.UseJsonName">
            <summary>
            Boolean to use the Json's file name for the driver package (and contents).
            This can be used when a manufacturer/base model contain a special character like "&amp;"
            to allow the filename use "And" and the manufacturer/base model to use "&amp;".
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.GeneralInformationDefinition.LicenseRequired">
            <summary>
            Used to identify drivers that require licensing.
            This shall be used by third-parties developing drivers who wish to charge for the driver use.
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.GeneralInformationDefinition.ExtensionDeviceData">
            <summary>
            Specifies information that goes into the driver .dat file for extension drivers
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.GeneralInformationDefinition.RequiredMinimumComponentVersions">
            <summary>
            Component item and corresponding minimum version required by the driver
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.GeneralInformationDefinition.CHRequiredMinimumComponentVersions">
            <summary>
            Component item and corresponding CH minimum version required by the driver
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.GeneralInformationDefinition.IsIpServer">
            <summary>
            For IP drivers, setting this flag to true sets the communication type in the driver
            dat file so that the application knows this driver opens a listening port
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.IEventTimer">
            <summary>
                Raises an event periodically on a separate thread. The events can be
                started and stopped. Control over the frequency of the timer is outside
                the scope of this interface.
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.IEventTimer.TimerTick">
            <summary>
                Event fired for each tick of the timer.
                Do not call Stop() from the handler or the thread may hang.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.IEventTimer.Cancel">
            <summary>
                Cancel the timer, stopping it without blocking waiting for TimerTick
                events to complete. Safe to call from a <see cref="E:Crestron.DeviceDrivers.SDK.IEventTimer.TimerTick" />
                event handler.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.IEventTimer.Start">
            <summary>
                Start the timer if it is not already running.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.IEventTimer.Stop">
            <summary>
                Stop the timer and block until any active TimerTick events complete
            </summary>
            <remarks>DO NOT CALL THIS FROM A <see cref="E:Crestron.DeviceDrivers.SDK.IEventTimer.TimerTick" /> HANDLER!</remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.ScheduledTimeout.Cancel">
            <summary>
            Like Reset(0) but do not call the timeout action
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.ScheduledTimeout.Pause">
            <summary>
            Halts the timer in the "not timed out" state
            </summary>
            <remarks>There's no "resume" feature - timeout must reset or cancel to un-pause</remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.ScheduledTimeout.SetDefaultTimeout(System.UInt32,System.Boolean)">
            <summary>
            Sets the default timeout, optionally rescheduling the timeout if it is sooner
            </summary>
            <param name="timeout">The new default timeout</param>
            <param name="rescheduleIfSooner">
            If true, will reset the timeout if the new due time is sooner.
            If false, will not reset the timeout.
            </param>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Time.TimeParseMultipliers">
            <summary>
            Defines multipliers for the different segments of a timestamp for <see cref="M:Crestron.DeviceDrivers.SDK.Time.TryParseTime(System.String,System.TimeSpan@)"/>.
            <para>
            60 seconds in a minute,
            60 minutes in an hour,
            24 hours in a day
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Time.DefaultMaxMillisTimeout">
            <summary>
                Used as the rollover prevention threshold in timeout timers.
                Arbitrarily chose 2 days short of the max with the assumption we're
                checking timers more often than every two days
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Time.TryParseTime(System.String,System.TimeSpan@)">
            <summary>
            Converts an "easy to produce" time string into a TimeSpan
            <para>
            The input string is in the format DD:HH:MM:SS.mmm, where the upper-most
            segments (between ':' characters) are optional, and may be any length
            (not constrained to 60 seconds or minutes, etc.).
            </para>
            <para>
            For example, "01:00:00:01.000" and "1:0:0:1" are both equivalent to 1 day and 1 second.
            "00:00:100", "100" and "100.000" and "1:40" are all equal to 100 seconds.
            "25:00:00" and "01:01:00:00.000" are both equal to 1 day and 1 hour.
            </para>
            <para>
            The non-standard formatting of the input string is designed to be flexible
            such that it is easy to transform whatever format the device reports back
            into a compatible format without any clunky conversions or depending on
            various culture and .NET framework configurations in <see cref="M:System.TimeSpan.Parse(System.String)"/>.
            </para>
            </summary>
            <param name="value">The input string to parse</param>
            <param name="result">Parsed <see cref="T:System.TimeSpan"/> result</param>
            <returns>True if parsing is successful, false if the input is null, empty, or invalid</returns>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Util.SetUpdatedEventArgs`1.AddedItems">
            <summary>
            Items added since the last event
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Util.SetUpdatedEventArgs`1.RemovedItems">
            <summary>
            Items removed since the last event
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Util.ThreadSafePriorityQueue`1">
            <summary>
            NOTE: Has a max size and will not grow beyond that
            </summary>
            <typeparam name="T">Type of items in queue</typeparam>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.Extensions.AttributeExtensions.GetAttribute``1(Crestron.SimplSharp.Reflection.MemberInfo,System.Boolean)">
            <summary>
                Gets the only custom attribute matching this type from a member, or null
            </summary>
            <typeparam name="T">Type of attribute to search for</typeparam>
            <param name="member">Member containing the attributes</param>
            <param name="inherit">Whether or not to consider inherited attributes</param>
            <returns>Matching attribute or null</returns>
            <remarks>
                This differs from the standard GetCustomAttribute implementation in that it does
                not throw when there is more than one matching attribute, it just returns null.
            </remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.Extensions.AttributeExtensions.GetAttributes``1(Crestron.SimplSharp.Reflection.MemberInfo,System.Boolean)">
            <summary>
                Gets all custom attributes of a particular type for a member
            </summary>
            <typeparam name="T">Type of attribute to search for</typeparam>
            <param name="member">Member containing the attributes</param>
            <param name="inherit">Whether or not to consider inherited attributes</param>
            <returns>An enumerable of matching attributes</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.Extensions.AttributeExtensions.GetAttribute``1(Crestron.SimplSharp.Reflection.ParameterInfo,System.Boolean)">
            <summary>
                Gets the only custom attribute matching this type from a parameter, or null
            </summary>
            <typeparam name="T">Type of attribute to search for</typeparam>
            <param name="parameterInfo"><see cref="T:Crestron.SimplSharp.Reflection.ParameterInfo"/> containing the attributes</param>
            <param name="inherit">Whether or not to consider inherited attributes</param>
            <returns>Matching attribute or null</returns>
            <remarks>
                This differs from the standard GetCustomAttribute implementation in that it does
                not throw when there is more than one matching attribute, it just returns null.
            </remarks>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.Extensions.AttributeExtensions.GetAttributes``1(Crestron.SimplSharp.Reflection.ParameterInfo,System.Boolean)">
            <summary>
                Gets all custom attributes of a particular type for a parameter
            </summary>
            <typeparam name="T">Type of attribute to search for</typeparam>
            <param name="parameterInfo"><see cref="T:Crestron.SimplSharp.Reflection.ParameterInfo"/> containing the attributes</param>
            <param name="inherit">Whether or not to consider inherited attributes</param>
            <returns>An enumerable of matching attributes</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Util.WebSocket.IWebSocket">
            <summary>
            Represents a WebSocket connection
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.Util.WebSocket.IWebSocket.OnPacketReceived">
            <summary>
            Raised whenever a packet is received
            </summary>
        </member>
        <member name="E:Crestron.DeviceDrivers.SDK.Util.WebSocket.IWebSocket.OnDisconnected">
            <summary>
            Raised whenever socket disconnection is detected
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.IWebSocket.Disconnect">
            <summary>
            Close the socket
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.IWebSocket.Send(System.String)">
            <summary>
            Send a string packet
            </summary>
            <param name="data">The string data to send</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.IWebSocket.Send(System.Byte[])">
            <summary>
            Send a binary packet
            </summary>
            <param name="data">Binary data to send</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket">
            <summary>
            Helper methods for high-level WebSocket operations
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.WebSocketSecGuid">
            <summary>
            Guid string used in WebSocket connection requests
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.CloseRequest">
            <summary>
            Object used to indicate a close request packet
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.WebSocketKeyRegex">
            <summary>
            Regular expression to find the Sec-WebSocket-Key header
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.WebSocketAcceptRegex">
            <summary>
            Regular expression to find the Sec-WebSocket-Accept header
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.GenerateHandshakeRequest(System.String,System.String,System.String@)">
            <summary>
            Generate the opening HTTP request to start a WebSocket connection on a server
            </summary>
            <param name="endpoint">Server endpoint, i.e. / or /api/ws</param>
            <param name="hostHeader">Value for Host header, or null to not include</param>
            <param name="expectedHash">Expected hash code to get back in the response</param>
            <returns>The HTTP request string</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.GenerateHandshakeResponse(System.String)">
            <summary>
            Generate an HTTP response to the opening handshake request from a client
            </summary>
            <param name="requestData">The string HTTP request received from the client</param>
            <returns>The string to send back to the client, or null for an invalid request</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.VerifyHandshakeResponse(System.String,System.String)">
            <summary>
            Verify the HTTP response from a server after sending a handshake request
            </summary>
            <param name="responseData">The HTTP response from the server</param>
            <param name="expectedHash">The expected hash generated when the request was created</param>
            <returns>True if the handshake succeeded</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.HashForKey(System.String)">
            <summary>
            Calculates the hash code for the given key
            </summary>
            <param name="key">The Sec-WebSocket-Key value</param>
            <returns>Hash to send back in Sec-WebSocket-Accept</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.Receive(System.Func{System.Byte[],System.Int32,System.Int32,System.Int32})">
            <summary>
            Receive a full WebSocket packet (which may be comprised of multiple frames)
            </summary>
            <param name="reader">
            Buffer read function returning the number of bytes read.
            Parameters are dest, offset, length.
            </param>
            <returns>
            <para>
            If not enough bytes are in the buffer yet, returns null.
            </para>
            <para>
            If a text packet was received, returns a <see cref="T:System.String"/>
            </para>
            <para>
            If a binary packet was received, returns a <see cref="T:System.Byte"/> array
            </para>
            <para>
            If a ping or pong packet was received, returns the <see cref="T:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame"/> for it
            </para>
            <para>
            If a close request was received, returns <see cref="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.CloseRequest"/>
            </para>
            </returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.Send(System.Byte[],System.Action{System.Byte[],System.Int32,System.Int32},System.Boolean)">
            <summary>
            Write binary data to the writer stream
            </summary>
            <param name="data">The data to send</param>
            <param name="writer">Function to write to the output stream buffer (dest, offset, length)</param>
            <param name="isServer">Whether or not to format the frames as a server would</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocket.Send(System.String,System.Action{System.Byte[],System.Int32,System.Int32},System.Boolean)">
            <summary>
            Write text data to the writer stream
            </summary>
            <param name="data">The data to send</param>
            <param name="writer">Function to write to the output stream buffer (dest, offset, length)</param>
            <param name="isServer">Whether or not to format the frames as a server would</param>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketClientConnectionEventArgs">
            <summary>
            Event args for client connection/disconnection events
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketClientConnectionEventArgs.#ctor(Crestron.DeviceDrivers.SDK.Util.WebSocket.IWebSocket,System.Boolean)">
            <summary>
            Initialize all properties
            </summary>
            <param name="client"><see cref="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketClientConnectionEventArgs.Client"/></param>
            <param name="isConnected"><see cref="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketClientConnectionEventArgs.IsConnected"/></param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketClientConnectionEventArgs.Client">
            <summary>
            The client instance that was connected or disconnected
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketClientConnectionEventArgs.IsConnected">
            <summary>
            Whether this is a connection or disconnection event
            </summary>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits">
            <summary>
            Standard control bit codes from the WebSocket standard
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits.Fin">
            <summary>
            Ths is the last frame of the packet
            <para>
            This bit is set in combination with other bits
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits.OpCode">
            <summary>
            Bitmask for the op code bits. The Op* members below reside
            within this bitmask
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits.OpContinuation">
            <summary>
            Continuation operation - data is part of previously started packet
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits.OpText">
            <summary>
            Data is start of a new text packet
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits.OpBinary">
            <summary>
            Data is start of a new binary packet
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits.OpClose">
            <summary>
            Packet is a notification that the WebSocket is closing
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits.OpPing">
            <summary>
            Packet is a ping request
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits.OpPong">
            <summary>
            Packet is a pong response from a ping request
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.NumBufSize">
            <summary>
            Size of small buffer used to receive the packet size
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.NumInitialBytes">
            <summary>
            Number of bytes in first receive step
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.ControlByteIndex">
            <summary>
            Index of the control byte
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.LengthByteIndex">
            <summary>
            Index of the initial length byte
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.Length16BitNumBytes">
            <summary>
            Number of bytes to receive when the length byte indicates
            a 16-bit length follows
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.Length64BitNumBytes">
            <summary>
            Number of bytes to receive when the length byte indicates
            a 64-bit length follows
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.XorMaskSize">
            <summary>
            Size of XOR mask in bytes
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.LengthMaskEnabledBit">
            <summary>
            Bitmask for the "MaskEnabled" bit which is stored in the MSBit of the length byte
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.LengthMask">
            <summary>
            Bitmask for the length portion of the length byte
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.Length16Bit">
            <summary>
            Constant used as the length when the real length is specified in the following
            16 bits
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.Length64Bit">
            <summary>
            Constant used as the length when the real length is specified in the following
            64 bits
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.Max16BitLength">
            <summary>
            Maximum length that can be fit into a 16-bit length packet
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.Max7BitLength">
            <summary>
            Maximum length that can fit into a packet with just the 8-bit length byte
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.Random">
            <summary>
            Random generator for the XOR mask
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.#ctor(Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits,System.Byte[])">
            <summary>
            Initialize all properties
            </summary>
            <param name="controlBits"><see cref="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.ControlBits"/></param>
            <param name="data"><see cref="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.Data"/></param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.#ctor(System.Byte[])">
            <summary>
            Create a binary WebSocket frame
            </summary>
            <param name="data">The binary data contained in the packet</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.#ctor(System.String)">
            <summary>
            Create a text frame
            </summary>
            <param name="data">The text to include in the packet</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.ControlBits">
            <summary>
            The <see cref="T:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.FrameControlBits"/> associated with the frame
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.Data">
            <summary>
            The bytes in the data payload of the packet
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.CreatePing">
            <summary>
            Creates a Ping frame
            </summary>
            <returns>New <see cref="T:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame"/> instance for a ping</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.CreatePong(System.Byte[])">
            <summary>
            Creates a Pong response given the data from a Ping frame
            </summary>
            <param name="pingData">The data from the ping frame that should be sent back</param>
            <returns>Correct Pong response frame for the ping</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.ReadFrame(System.Func{System.Byte[],System.Int32,System.Int32,System.Int32})">
            <summary>
            Reads a frame using the buffer reader function
            </summary>
            <param name="reader">Function int Read(dest, offset, length) used to read data</param>
            <returns>The received frame, or null if not enough bytes were received yet</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketFrame.ToBytes(System.Boolean)">
            <summary>
            Convert the frame to its byte representation
            </summary>
            <param name="useMask">Whether or not to use the XOR mask in the payload (clients are supposed to)</param>
            <returns>The bytes representing the packet</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketPacketEventArgs">
             <summary>
             Event args for when a WebSocket packet is received
             <para>
             Only one of <see cref="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketPacketEventArgs.BinaryData"/> or <see cref="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketPacketEventArgs.Text"/> will be
             non-null depending on what the received packet type was.
             </para>
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketPacketEventArgs.#ctor(Crestron.DeviceDrivers.SDK.Util.WebSocket.IWebSocket,System.String)">
            <summary>
            Create a text-based packet
            </summary>
            <param name="socket">The socket the packet was received from</param>
            <param name="text">The text that was received</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketPacketEventArgs.#ctor(Crestron.DeviceDrivers.SDK.Util.WebSocket.IWebSocket,System.Byte[])">
            <summary>
            Create a binary packet
            </summary>
            <param name="socket">The socket the packet was received from</param>
            <param name="data">The bytes that were received</param>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketPacketEventArgs.BinaryData">
            <summary>
            The bytes that were received
            <para>
            Will be null for a text packet
            </para>
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketPacketEventArgs.Socket">
            <summary>
            The socket the data was received from
            </summary>
        </member>
        <member name="P:Crestron.DeviceDrivers.SDK.Util.WebSocket.WebSocketPacketEventArgs.Text">
            <summary>
            The text that was received
            <para>
            Will be null for a binary packet
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.DriverDataStore._storedValues">
            <summary>
                Local cache of stored values. Used to re-save values when unique identifier is changed.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.Util.DriverDataStore._values">
            <summary>
                Holds <see cref="T:Crestron.DeviceDrivers.SDK.Util.PersistentValue" /> instances so that repeated calls to <see cref="M:Crestron.DeviceDrivers.SDK.Util.DriverDataStore.GetPersistentValue(System.String)" /> return
                the same object.
            </summary>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.DriverDataStore.SaveValue(System.String,System.String)">
            <summary>
            Saves a value but doesn't modify <see cref="F:Crestron.DeviceDrivers.SDK.Util.DriverDataStore._storedValues"/>
            </summary>
            <param name="key">The key to save the value under</param>
            <param name="value">The value to save</param>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.SimplSharp.HashCalculation.MD5(System.Byte[])">
            <summary>
                Calculates the MD5 hash value for the specified byte array
            </summary>
            <param name="input">The byte array to calculate</param>
            <returns>The computed hash array</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.SimplSharp.HashCalculation.SHA1(System.Byte[])">
            <summary>
                Calculates the SHA1 hash value for the specified byte array
            </summary>
            <param name="input">The byte array to calculate</param>
            <returns>The computed hash array</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.SimplSharp.HashCalculation.MD5(System.String)">
            <summary>
                Calculates the MD5 hash value for the specified string using the Default Encoding
            </summary>
            <param name="input">The string to calculate hash</param>
            <returns>The computed hash array</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.StringUtils.BytesToHex(System.Byte[])">
            <summary>
                Converts a byte array into its hex string representation
            </summary>
            <param name="input">The bytes to convert into a hex string</param>
            <returns>The string representation of the byte array</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.StringUtils.BytesToHex(System.Byte[],System.String)">
            <summary>
                Converts a byte array into its upper-case hex string representation
            </summary>
            <param name="input">The bytes to convert into a hex string</param>
            <param name="separator">The separator between the bytes</param>
            <returns>The string representation of the byte array, separated by the given "separator"</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.StringUtils.BytesToHex(System.String,System.String)">
            <summary>
                Converts a byte array into its upper-case hex string representation
            </summary>
            <param name="input">The bytes to convert into a hex string</param>
            <param name="separator">The separator between the bytes</param>
            <returns>The string representation of the byte array, separated by the given "separator"</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.StringUtils.ToHexIfUnprintable(System.String,System.Boolean)">
            <summary>
                Replaces the string with an upper-case hex representation if it contains any unprintable characters
            </summary>
            <param name="s">The input string</param>
            <param name="addLineFeeds">Whether to add newlines to bare linefeed characters</param>
            <returns>The input string, or the input string converted to hex if it was unprintable</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.StringUtils.FormatAndReplaceUnprintable(System.String,System.Object[])">
            <summary>
                Like string.Format, but replace unprintable strings in arguments with hex representations
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.StringUtils.ToConsistentString(System.Object)">
            <summary>
            Converts an object to a string "consistently" across platforms
            </summary>
            <param name="o">The object to convert</param>
            <returns>A consistent string representation of the object</returns>
        </member>
        <member name="M:Crestron.DeviceDrivers.SDK.Util.StringUtils.JsonEscapeNonAsciiCharacters(System.String)">
            <summary>
            Escapes characters greater than 0x7f with \u0000 - style escape sequences
            </summary>
            <param name="s">The input string</param>
            <returns>An escaped string</returns>
        </member>
        <member name="T:Crestron.DeviceDrivers.SDK.Util.Tools.ConsoleDriverControllerLogger">
            <summary>
            This is only for testing and test tools.
            Do not use this in a production application, module, driver, etc.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.ValueLookupIndexType.Invalid">
            <summary>
            Never valid, do not use
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.ValueLookupIndexType.Any">
            <summary>
            Index for access things that are explicitly supposed to match any category.
            </summary>
            <remarks>
            This is NOT the "wildcard" input that would match any other state.
            The "Any" part is one-way.
            Transformation outputs go in the "Any" bucket so that other states will include them.
            Asking for a state in the "Any" category will only return states like transformations that
            apply to any of the other categories, NOT check all categories for the state.
            </remarks>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.ValueLookupIndexType.TargetState">
            <summary>
            The state the driver is trying to set or has set on the device
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.ValueLookupIndexType.TargetDevice">
            <summary>
            The state the driver is trying to set or has set on the device, in device API units
            <para>
            Often the same as <see cref="F:Crestron.DeviceDrivers.SDK.ValueLookupIndexType.TargetState"/>, but for cases like a <see cref="T:Crestron.DeviceDrivers.SDK.Controllers.NumericController.NumericStateController"/>,
            the value may be different.
            For example, <see cref="F:Crestron.DeviceDrivers.SDK.ValueLookupIndexType.TargetState"/> might be 0.5 but <see cref="F:Crestron.DeviceDrivers.SDK.ValueLookupIndexType.TargetDevice"/> would be 50 if the
            controller range was 0 - 100
            </para>
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.ValueLookupIndexType.TargetPending">
            <summary>
            Used when there is a "pending" target state that is about to be set.
            At time of writing, the only use case is while processing a rule for an incoming <see cref="F:Crestron.DeviceDrivers.SDK.StateCommand.Set"/>
            <see cref="T:Crestron.DeviceDrivers.SDK.ControlCommand"/>.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.ValueLookupIndexType.PresentState">
            <summary>
            The present state of the device, either from feedback or based on what the last thing the driver
            sent was for the state.
            If feedback is available, that will be used for the present state.
            </summary>
        </member>
        <member name="F:Crestron.DeviceDrivers.SDK.ValueLookupIndexType.PresentPending">
            <summary>
            Pending feedback for the state
            </summary>
        </member>
    </members>
</doc>
