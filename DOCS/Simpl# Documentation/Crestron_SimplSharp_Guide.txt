# Crestron SIMPL#, SIMPL#Pro, and C# Programming Guide

## 1. Introduction

This document provides a comprehensive guide for developing Crestron control system programs using SIMPL#, SIMPL#Pro, and standard C#. It includes environment setup, code examples, best practices, and platform-specific considerations.

## 2. Environment and Platform Selection

### 2.1. Platform Matrix

| Feature                | SIMPL#                    | SIMPL#Pro                      | Standard C# (4-Series/VC-4)  |
|------------------------|---------------------------|--------------------------------|------------------------------|
| Usage                 | Libraries for SIMPL+      | Full programs                  | Full programs                |
| Hardware Access       | No (via SIMPL only)       | Yes (direct, dynamic)          | Yes (modern .NET)            |
| Framework             | .NET 3.5 Compact          | .NET 3.5 Compact (3-Series)    | Modern .NET                  |
| IDE                   | VS2008 SP1                | VS2008 SP1 or Modern VS        | Modern VS                    |

## 3. Project Setup

### 3.1. SIMPL# Library Project

1. Open Visual Studio 2008 SP1
2. Create new Class Library project
3. Target .NET 3.5 Compact Framework
4. Add Crestron.SimplSharp and Crestron.SimplSharpPro references

### 3.2. SIMPL#Pro Project

1. Create new SIMPL#Pro project in VS2008 SP1 (3-Series) or modern VS (4-Series)
2. Ensure proper Crestron NuGet packages are installed
3. Set up post-build events for deployment

## 4. Core Programming Patterns

### 4.1. SIMPL#Pro Program Structure

```csharp
using System;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;

public class ControlSystem : CrestronControlSystem
{
    public ControlSystem() : base()
    {
        // Constructor - no hardware access
    }

    public override void InitializeSystem()
    {
        // Hardware initialization and event subscriptions
        try
        {
            // Register and configure hardware
            if (this.SupportsVersiport)
            {
                for (uint i = 1; i <= 2; i++)
                {
                    if (this.VersiPorts[i].Register() == eDeviceRegistrationUnRegistrationResponse.Success)
                    {
                        this.VersiPorts[i].SetVersiportConfiguration(eVersiportConfiguration.DigitalInput);
                        this.VersiPorts[i].VersiportChange += new VersiportEventHandler(Versiport_Change);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ErrorLog.Error("Initialization Error: {0}", ex.Message);
        }
    }

    private void Versiport_Change(Versiport port, VersiportEventArgs args)
    {
        // Handle versiport state changes
    }
}
```

### 4.2. Hardware Registration Best Practices

- Always check device support before registration
- Verify registration success
- Implement proper error handling
- Clean up resources on shutdown
- Subscribe to state change events

## 5. Common Operations

### 5.1. Digital Output Control

```csharp
// Set digital output
RelayPort relay = new RelayPort(1, this);
if (relay.Register() == eDeviceRegistrationUnRegistrationResponse.Success)
{
    relay.State = eRelayState.On;  // or eRelayState.Off
}
```

### 5.2. Serial Communication

```csharp
public class SerialDevice
{
    private ComPort _comPort;
    
    public void Initialize(ControlSystem cs, string portName, int baudRate)
    {
        _comPort = new ComPort(portName, baudRate, 0, 0, eStopBits.None, eParity.NoParity, eHandshake.eHandshakeNone);
        _comPort.SerialDataReceived += new ComPortDataReceivedEvent(ComPort_DataReceived);
        
        if (_comPort.Register() != eDeviceRegistrationUnRegistrationResponse.Success)
        {
            ErrorLog.Error("Failed to register COM port");
            return;
        }
    }
    
    private void ComPort_DataReceived(ComPort port, ComPortSerialDataEventArgs args)
    {
        // Handle received data
        string data = port.ReadTo("\r");
        // Process data...
    }
    
    public void SendCommand(string command)
    {
        if (_comPort != null && _comPort.IsOpen)
        {
            _comPort.Write(command + "\r");
        }
    }
}
```

## 6. Error Handling and Logging

### 6.1. Basic Error Handling

```csharp
try
{
    // Code that might throw
}
catch (Exception ex)
{
    ErrorLog.Error("Operation failed: {0}", ex.Message);
    // Handle or rethrow
}
```

### 6.2. Debug Logging

```csharp
// Debug level logging (only in debug builds)
Crestron.SimplSharp.CrestronDebug.PrintLine("Debug message: {0}", someValue);

// Error logging
ErrorLog.Error("Error message: {0}", errorDetails);
ErrorLog.Warn("Warning message");
ErrorLog.Notice("Notice message");
```

## 7. Best Practices

1. **Hardware Access**
   - Always check device support before access
   - Verify registration success
   - Implement proper cleanup

2. **Thread Safety**
   - Use lock objects for shared resources
   - Be cautious with timers and callbacks
   - Use CrestronInvoke.BeginInvoke for UI updates

3. **Memory Management**
   - Dispose of unmanaged resources
   - Unsubscribe from events when done
   - Be mindful of object lifecycles

4. **Error Handling**
   - Use try-catch blocks for hardware operations
   - Log meaningful error messages
   - Implement recovery strategies

## 8. Common Pitfalls

1. **Watchdog Timeouts**
   - Keep initialization under 20 seconds
   - Move long operations to separate threads
   - Use proper error handling

2. **Event Handler Leaks**
   - Always unsubscribe from events
   - Use weak event patterns when appropriate
   - Clean up in Dispose/finalizer

3. **Thread Safety**
   - Avoid UI updates from background threads
   - Use proper synchronization
   - Be careful with static members

## 9. Deployment

### 9.1. Compilation
- Set proper build configuration (Debug/Release)
- Ensure correct target platform (ARM for 3-Series, x64 for 4-Series)
- Verify all dependencies are included

### 9.2. Installation
- Copy compiled files to processor
- Update program info in Crestron Toolbox
- Verify proper file permissions

## 10. Troubleshooting

1. **Common Issues**
   - Registration failures
   - Watchdog timeouts
   - Memory leaks
   - Thread deadlocks

2. **Debugging Tools**
   - Crestron Toolbox
   - Error logs
   - System info
   - Network monitoring

## 11. Resources

1. **Documentation**
   - Crestron Help Files
   - API Reference
   - SDK Documentation

2. **Community**
   - Crestron Developer Forum
   - GitHub Repositories
   - User Groups

## 12. Version History

- 1.0.0 (2025-07-14): Initial version

## 13. Contact

For support or questions, contact the development team.
